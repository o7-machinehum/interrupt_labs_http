<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Interrupt Labs Blog</title>
    <link>https://interruptlabs.ca/</link>
    
    <atom:link href="https://interruptlabs.ca/atom.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 04 Jun 2025 10:43:02 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Pick Your Payload - What Open-source Security Hardware Should we Build Next?</title>
      <link>https://interruptlabs.ca/2025/06/04/whats-next/</link>
      <guid>https://interruptlabs.ca/2025/06/04/whats-next/</guid>
      <pubDate>Tue, 03 Jun 2025 22:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;strong&gt;Everything we do is for educational and ethical purposes &lt;em&gt;only&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I build open source hardware that</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><strong>Everything we do is for educational and ethical purposes <em>only</em>.</strong></p><p>I build open source hardware that <em>I</em> want, but I won’t work on hardware nobody else wants. If people aren’t fired up, I can’t get excited, so my projects only take off when there’s real interest. I’ve got three ideas, please pick your favourite. I only have so much time, and I want to gauge interest first. They’re all cybersecurity&#x2F;hacking devices, and must additionally meet these requirements:</p><ul><li><strong>Purposeful:</strong> The device should solve a real problem.</li><li><strong>Platform over Product:</strong> Users should think “What can I make this do” over, “What can it do”.</li><li><strong>Educational:</strong> Users learn from it.</li><li><strong>Community Focused:</strong> Users should be excited, share their experiences and be part of a community.</li><li><strong>Open Source:</strong> My work is <strong>100%</strong> open source. This is to reduce e-waste, empower users and provide an educational outlet.</li><li><strong>Legal:</strong> According to Canadian and Swiss law.</li></ul><p>The ideas…</p><h2 id="The-Blackhat-a-Hacking-Rig"><a href="#The-Blackhat-a-Hacking-Rig" class="headerlink" title="The Blackhat - a Hacking Rig"></a>The Blackhat - a Hacking Rig</h2><p><em>A handheld Linux-based computer with an emphasis on cybersecurity.</em></p><p><img src="/img/hacking-rig.jpg"><br>You might already be familiar with the Flipper Blackhat — a single-board computer (SBC) add-on module I developed for the Flipper Zero. This would be a stand-alone version of the device. Let’s get into the specs!</p><h3 id="Reasonable-Keyboard"><a href="#Reasonable-Keyboard" class="headerlink" title="Reasonable Keyboard"></a>Reasonable Keyboard</h3><p>You won’t have to retrain your fingers to type on this thing, no special key sequences, just a normal layout you would find on a PC. I would use a keyboard from Solder Party:</p><p><img src="/img/sp-keeb.jpg"></p><p>I’ve touched this thing IRL, and it feels great: super clacky and tactile. @arturo182 designed it and it’s gone into a few handheld cyberdecks already.</p><p>Additionally, I want the keyboard to be swappable, so the user can use a gamepad, trackpad, potentiometer, difference language keyboard, etc.</p><h3 id="GPIO-and-Ports"><a href="#GPIO-and-Ports" class="headerlink" title="GPIO and Ports"></a>GPIO and Ports</h3><p>I would hope to include…</p><h4 id="Ports"><a href="#Ports" class="headerlink" title="Ports"></a>Ports</h4><ul><li>2x USB-A</li><li>USB-C</li><li>Headphone Jack</li><li>HDMI</li><li>Micro SD</li><li>Ethernet if it fits</li><li>Micro SD card</li></ul><h4 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h4><ul><li>RPI form factor 2x20 headers with compatible pinout</li><li>Flipper Zero compatible headers</li></ul><h3 id="Wireless"><a href="#Wireless" class="headerlink" title="Wireless"></a>Wireless</h3><ul><li>WiFi 2.4&#x2F;5Ghz</li><li>BT</li><li>Lora</li></ul><h3 id="The-Shape"><a href="#The-Shape" class="headerlink" title="The Shape"></a>The Shape</h3><ul><li>Should be “handheld”, a little larger than a GameBoy Colour.</li><li>Powered by 2x 18650 cells.</li></ul><h2 id="Cypherwatch"><a href="#Cypherwatch" class="headerlink" title="Cypherwatch"></a>Cypherwatch</h2><p><em>Offline password keeper and cryptography engine on your wrist.</em></p><p><img src="/img/cypherwatch.jpg"><br>A watch is an ideal hardware password keeper, since these devices only really work if you bring it everywhere. I’m personally not a fan of smartwatches, so I actually wear the classic Casio F91W. Cypherwatch would be very similar aesthetically, with a monochrome screen and USB-C port. The USB port can be connected to a PC for password injection and public-key-based authentication and signing.</p><p>I would also add some other goodies like…</p><ul><li>Keystroke injection</li><li>EMMC that is exposed over USB-MSD for an encrypted USB drive. You can use it for datasmuggleing (I don’t know what that is, but it sounds cool)</li><li>Shell access to the MCU</li></ul><p>It’s important to note there would be zero overlap with existing smartwatch functionality.</p><h2 id="Root-Rabbit"><a href="#Root-Rabbit" class="headerlink" title="Root Rabbit"></a>Root Rabbit</h2><p><em>USB&#x2F;Ethernet Pentesting tool.</em></p><p><img src="/img/root-rabbit.jpg"></p><p>The device features an ethernet port, a USB-A port, a side USB-C port, a DIP switch for payload selection, a battery and WiFi.</p><p>This can be used for, but not limited to:</p><ul><li>Virtual ethernet device</li><li>Wireless keylogger</li><li>Keystroke injection</li><li>Network scanner</li><li>Insert other hoodrat nasty exploit here</li></ul><p>General Specs:</p><ul><li><strong>Processor:</strong> SG2002</li><li><strong>RAM:</strong> 256MB</li><li><strong>Disk:</strong> SD Card</li><li><strong>Wireless:</strong> ESP32-C5 (5Ghz&#x2F;2.4Ghz)</li><li><strong>Battery:</strong> Exists</li></ul><h2 id="What-now"><a href="#What-now" class="headerlink" title="What now?"></a>What now?</h2><p><a href="https://docs.google.com/forms/d/e/1FAIpQLSd-NHnerS3Yc0LiuKanCHcj7N8i9H2WL3qrmp7DtlQzH8sBpw/viewform?usp=sharing&ouid=112459697969469626051">Link here to vote</a></p><p>There is also a <a href="https://discord.gg/EtZT7mjNuM">discord server</a> if you have a project suggestion, or want to engage in more discussion. Some upbeat&#x2F;appreciative sentence here.</p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2025/06/04/whats-next/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>5 Strategies to Sink your Hardware Startup</title>
      <link>https://interruptlabs.ca/2023/07/08/5-Strategies-to-Sink-your-Hardware-Startup/</link>
      <guid>https://interruptlabs.ca/2023/07/08/5-Strategies-to-Sink-your-Hardware-Startup/</guid>
      <pubDate>Fri, 07 Jul 2023 22:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;This isn’t a dropshipping success story, a lucrative exit, or a guide. This is a silly story documenting our failed hardware startup.</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>This isn’t a dropshipping success story, a lucrative exit, or a guide. This is a silly story documenting our failed hardware startup. It’s embarrassing to fail, so we seldom hear these stories, but I’m going to tell you one, here goes.</p><p>Fresh out of college a decade ago, I landed my first job as an “Electromechanical Technologist”. Here’s a graphic to describe my mindset.</p><p><img src="/img/me_2013.png"><br>The software engineer at my company had a side hustle selling point of sale machines to restaurants. One day he confronted me with a venture. The idea was to build and sell restaurant table pagers. It was simple: press the button, and the server shows up. Our device would outshine existing products, connecting seamlessly with phones, tablets, and computers. I was excited about the project and jumped on board immediately. I did all the hardware, and he did all the software. It was built with beautifully stained bamboo and neatly held condiments on the table.</p><p><img src="/img/pageup/page_up.jpg"><figcaption>“Next Generation” Table Pager</figcaption></p><p>The technology utilized low-power radios and could last for years on a single AA battery. My partner developed a great app, and we were eager to receive feedback, which leads me to my first point.</p><h2 id="Skip-Market-Research"><a href="#Skip-Market-Research" class="headerlink" title="Skip Market Research"></a>Skip Market Research</h2><p>We relied on the encouragement of friends and family, assuming they represented the entire market. Little did we realize that this approach had significant flaws. If we had conducted proper market research, we would have discovered these crucial insights:</p><ul><li><strong>Restaurant Owners:</strong> Typically financially strained.</li><li><strong>Patrons:</strong> Not everyone feels comfortable using a pager.</li><li><strong>Restaurant workers:</strong> resistant to changing their workflow (rightfully so).</li></ul><p>Three major issues with our three customers, we’re off to a good start! Let’s get to the next mistake.</p><h2 id="Skip-Market-Testing"><a href="#Skip-Market-Testing" class="headerlink" title="Skip Market Testing"></a>Skip Market Testing</h2><p>After building a few devices, we started receiving volume quotes for the enclosure. We were quoted $5,000 for 1,000 units ($5&#x2F;unit) and a smaller quote of $1,000 for 75 units ($13&#x2F;unit). This was our first significant expense, and as 20 year old, this was a lot of cash.</p><p>We were aiming for a sub-$10 target for the device. Focusing on margins so early on was one of our many mistakes. Since we skipped market research, our goal should have been to test the market. We needed to determine if people would buy the hardware, and the cost of conducting this test was $1,000 or $5,000.</p><p>We chose to pay $5,000 to test the market.</p><p><img src="/img/pageup/boxes.jpg"></p><h2 id="Don’t-Collect-People’s-money"><a href="#Don’t-Collect-People’s-money" class="headerlink" title="Don’t Collect People’s money"></a>Don’t Collect People’s money</h2><p>Our HQ was the grubby basement of a restaurant in a strip mall. Rats were involved, but we didn’t care; this is ground zero for all startups.</p><p>The semi driver dropped off our pallet in the strip mall parking lot. He shook his head when we told him we didn’t have a forklift. Nevertheless, excitement filled the air as we unpacked 1,000 units into the basement. We had verbal orders from nearby establishments and could finally deliver on them. When we showed up, one by one, excuses started pouring in. Without any financial commitment from customers, our orders meant nothing.</p><p>Get cash in hand, or at least a deposit.</p><h2 id="Try-Selling-Ice"><a href="#Try-Selling-Ice" class="headerlink" title="Try Selling Ice"></a>Try Selling Ice</h2><p>At this point, we felt defeated. We were tired of looking at the basement filled with unsold products, so we finally admitted to needing a salesperson. We connected with a local sales guy who specialized in selling restaurant equipment. He had a reputation for being a smooth talker, claiming he could “sell ice to an Eskimo.” With him onboard, we hoped that our luck would turn around.</p><p>Unfortunately, even with his sales expertise, he couldn’t sell our product either. We found ourselves back at ground zero, feeling discouraged and uncertain about the future of our startup.</p><p>A good sales team won’t be able to sell flawed products, but they are the necessary prerequisite.</p><h2 id="Don’t-Pivot"><a href="#Don’t-Pivot" class="headerlink" title="Don’t Pivot"></a>Don’t Pivot</h2><p>During one of my partner’s visits to the physiotherapist, he happened to mention our venture. The physiotherapist was intrigued. He needed a system for his assistants to page him when patients were ready for inspection. On the spot, he purchased our system, with the condition that it came in a more reasonable enclosure.</p><p>At that point, we regretted spending $5,000 instead of the $1,000 option for enclosures. Nevertheless, we designed different enclosures and delivered them to our first real customer. Since he had offices all over the province, he expressed interest in buying more. Revisiting the initial customer analysis.</p><ul><li><strong>Physiotherapists:</strong> Have money.</li><li><strong>Office workers:</strong> More inclined to change their workflow if it benefits everyone.</li><li><strong>Patrons:</strong> Don’t have to use the tech.</li></ul><p>Another thing to mention is that this customer could see our product affecting his bottom line, which wasn’t obvious when dealing with restaurant owners.</p><p>With a mechanical modification, our technology worked perfectly for a different, better customer.</p><h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><p>Despite the success of the pivot, the project eventually fizzled out. By then, I had moved on to another job and was busy with travel, unable to support the electrical side of the business. I became disillusioned with the support required and pursued other exciting ventures.</p><p>The project now sits in an undocumented, <a href="https://github.com/o7-machinehum/Pageup">open source repository</a> with zero stars. I realize our mistakes were preventable; we could have produced a better outcome by reading a book or hiring a business person, but that’s not what happened. We acted out of impulse and blissful ignorance and paid the price. If I could go back in time, I wouldn’t change a thing.</p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2023/07/08/5-Strategies-to-Sink-your-Hardware-Startup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kicad Vault - A Component Management System</title>
      <link>https://interruptlabs.ca/2023/05/24/kicad-vault/</link>
      <guid>https://interruptlabs.ca/2023/05/24/kicad-vault/</guid>
      <pubDate>Tue, 23 May 2023 22:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;strong&gt;This post is not sponsored or affiliated with KiCad or Digikey.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Back when I worked for a hardware startup,</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><strong>This post is not sponsored or affiliated with KiCad or Digikey.</strong></p><p>Back when I worked for a hardware startup, rather than making my own, we used Altium. Altium is a PCB design suite that is loved and hated by thousands. It’s not cheap, and if you need a component management system, you could pry open your wallet and shell out more, upgrading to “Altium Vault”. Vault looks at all your schematics, checks the stock, and highlights supply risks and costs. The system works well but costs a ton, so I made my own.</p><p><img src="/img/kicad-vault/logo.png"></p><p>This idea is simple. It’s just a Python script that…</p><ul><li>Finds all your KiCad projects.</li><li>Builds their BOMs.</li><li>Extends their BOMs with digikeys description of components.</li><li>Checks their availability on Digikey.</li><li>Generates some HTML pages that can be used to view this info.</li></ul><p>Here is an example of the first page after the content is generated. Pretty simple but does the trick.<br><img src="/img/kicad-vault/index.png"></p><p>If you click on one of the projects, you’ll get it’s BOM, with digikey pricing and stock. <a href="/kicad-vault/">Link to the BOM here.</a></p><p>Here’s a list of features I plan to integrate into it over the next few months.</p><ul><li>Part swapping: If a component is out of stock, you should be able to click a button and “substitute with a reasonable alternative from a drop-down menu”. It should then update the part number in KiCad.</li><li>Components Library: A global library of all the parts you have used should exist. The ones that are in stock and cheaper should be highlighted.</li><li>Auto Population: When you’re done with your schematic, the script should automatically populate components with part numbers based on the description, value and footprint entered in KiCad.</li><li>Ordering: Using the APIs ordering boards and components should be done with a button click.</li></ul><p>Currently, it’s not a lot, an nowhere near Altium’s solution. But maybe on day it will be. <a href="https://github.com/o7-machinehum/kicad-vault">Github repository here</a>.</p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2023/05/24/kicad-vault/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>I Built a Self-Destructing USB Drive Part 3</title>
      <link>https://interruptlabs.ca/2023/02/06/I-Built-a-Self-Destructing-USB-Drive-Part-3/</link>
      <guid>https://interruptlabs.ca/2023/02/06/I-Built-a-Self-Destructing-USB-Drive-Part-3/</guid>
      <pubDate>Sun, 05 Feb 2023 23:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;I’m building an open-source USB drive with a hidden obfuscation If you plug the device in normally, it will appear blank, but if you</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>I’m building an open-source USB drive with a hidden obfuscation If you plug the device in normally, it will appear blank, but if you quickly plug it in three times in a row, you will be able to read and write data. We built Ovrdrive for journalists working in hostile environments, security researchers, and anyone interested in open hardware.</p><p align="center"><a href="https://shop.interruptlabs.ca/products/ovrdrive-usb">Device for Sale Now!</a></p><hr><p>I ended my last post with the design finished and the boards on order. Once I received the boards I built them up. I used a reflow hotplate for the top, and heat gun for the bottom.</p><p><img src="/img/usb-device.png"></p><p>After plugging the device into my PC, the USB flash controller enumerated and seemed to be working. All three voltage rails came up and looked stable. The dmesg logs got past the <code>USB</code> driver, the <code>usb-storage</code> driver, the <code>scsi</code> driver, but errored out on the <code>sd</code> driver. <a href="https://github.com/torvalds/linux/blob/master/drivers/scsi/sd.c#L2118">This is the section</a> of code where it was erroring out. Interestingly, the same message is produced when you plug in an sd card reader with no SD card. Here’s the error message:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[1676446.082295] usb 3-1: new high-speed USB device number 16 using ehci-pci</span><br><span class="line">[1676446.240444] usb 3-1: New USB device found, idVendor=090c, idProduct=3000, bcdDevice= 1.00</span><br><span class="line">[1676446.240463] usb 3-1: New USB device strings: Mfr=1, Product=2, SerialNumber=0</span><br><span class="line">[1676446.240467] usb 3-1: Product: SM3255AA MEMORY BAR</span><br><span class="line">[1676446.240470] usb 3-1: Manufacturer: Silicon Motion,Inc.</span><br><span class="line">[1676446.240926] usb-storage 3-1:1.0: USB Mass Storage device detected</span><br><span class="line">[1676446.241158] scsi host7: usb-storage 3-1:1.0</span><br><span class="line">[1676447.260193] scsi 7:0:0:0: Direct-Access USB MEMORY BAR   1000 PQ: 0 ANSI: 0 CCS</span><br><span class="line">[1676447.261910] sd 7:0:0:0: [sdg] Media removed, stopped polling</span><br><span class="line">[1676447.262814] sd 7:0:0:0: [sdg] Attached SCSI removable disk</span><br></pre></td></tr></table></figure><p>It looks like this so-called “block device” isn’t showing any blocks.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[machinehum@whitebox photos]$ lsblk</span><br><span class="line">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span><br><span class="line">sda      8:0    0 111.8G  0 disk</span><br><span class="line">├─sda1   8:1    0   200M  0 part /boot</span><br><span class="line">├─sda2   8:2    0    12G  0 part [SWAP]</span><br><span class="line">└─sda3   8:3    0  99.6G  0 part /</span><br><span class="line">sdb      8:16   0 476.9G  0 disk /home</span><br><span class="line">sdc      8:32   0   489G  0 disk</span><br><span class="line">├─sdc1   8:33   0 469.2G  0 part</span><br><span class="line">├─sdc2   8:34   0     1K  0 part</span><br><span class="line">└─sdc5   8:37   0  19.8G  0 part</span><br><span class="line">sdd      8:48   0 931.5G  0 disk</span><br><span class="line">└─sdd1   8:49   0 931.5G  0 part /mov</span><br><span class="line">sde      8:64   0 931.5G  0 disk</span><br><span class="line">└─sde2   8:66   0 931.5G  0 part /dat</span><br><span class="line">sdg      8:96   1     0B  0 disk   <span class="comment"># &lt;--- This drive is the one</span></span><br></pre></td></tr></table></figure><p>There could be a few different things going on at this point.</p><ul><li>The routing between the SM3257 (USB controller) and NAND flash is incorrect.</li><li>Some configuration is necessary on the SM3257.</li><li>Something else I’m missing.</li></ul><h2 id="Into-the-Jank"><a href="#Into-the-Jank" class="headerlink" title="Into the Jank"></a>Into the Jank</h2><p>I started googling around for information on the SM3257EN (my USB controller IC). This led me to a <a href="https://flashboot.ru/files/file/454/">Russian site</a> with a download link for a “SMI MP Tool”. The download contains a Windows executable for working with the SM3257EN. I fired up a Windows 10 VM and got the GUI working, but the software failed to detect the drive. I messed around with this for when felt like ages. I had nearly given up about when the sortware might have been developed. I thought it was probably the Windows XP era. Miraculusly, switching to an XP VM actually worked: the software finally detected the drive.<br><img src="/img/usb_winxp-2.png"></p><p>This is one of the many interfaces, don’t ask me what anything means.<br><img src="/img/usb_winxp-3.png"><br>At this point, I had zero documentation beyond the Russian comment section. I dedicated 30 minutes a day to “flash drive fuck around time” or FD-FAT, for short. I would fire up the Windows XP VM, press random buttons in the software and try to flash config files to the drive. I became utterly defeated and started wondering if this was even possible.</p><p>One day, I was in a FD-FAT session, pressing random buttons, when suddenly the GUI spat out, <code>ISP can&#39;t be found!!</code>. I googled this and ended up on the same <a href="https://www.usbdev.ru/articles/a_smi/ispcantbefound/">Russian Site</a>. From this webpage I found the “DYNA MPTool”. I downloaded this, hit the “Start” button, and somehow it provisioned the drive! I now had a 2GB flash drive I built from scratch! I have no idea how this worked, so don’t ask me.</p><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>I used a few test applications. I started with badblock, which tests for spaces in memory that don’t work. Badblock doesn’t care about filesystems or partitions. It looks at a block device, which is why you specify &#x2F;dev&#x2F;sdf over a partition. It simply writes known data test patterns to the memory and reads them back.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[machinehum@whitebox ~]$ sudo badblocks -w -s -o error.log /dev/sdf</span><br><span class="line">Testing with pattern 0xaa: done</span><br><span class="line">Reading and comparing: done</span><br><span class="line">Testing with pattern 0x55: done</span><br><span class="line">Reading and comparing: done</span><br><span class="line">Testing with pattern 0xff: done</span><br><span class="line">Reading and comparing: done</span><br><span class="line">Testing with pattern 0x00: done</span><br><span class="line">Reading and comparing: done</span><br></pre></td></tr></table></figure><p>With this working, I moved over to f3, which is partition aware. It works with files rather than raw memory blocks. These files are a pseudorandom bit sequence rather than a test pattern. It can then verify the data written and verify the speed.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[machinehum@whitebox ~]$ sudo f3write mnt/</span><br><span class="line">F3 write 8.0</span><br><span class="line">Copyright (C) 2010 Digirati Internet LTDA.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line"></span><br><span class="line">Free space: 1.91 GB</span><br><span class="line">Creating file 1.h2w ... OK!</span><br><span class="line">Creating file 2.h2w ... OK!</span><br><span class="line">Free space: 16.00 MB</span><br><span class="line">Average writing speed: 4.50 MB/s</span><br><span class="line">[machinehum@whitebox ~]$ ls mnt/</span><br><span class="line">1.h2w  2.h2w  lost+found</span><br><span class="line">[machinehum@whitebox ~]$ sudo f3read mnt/</span><br><span class="line">F3 read 8.0</span><br><span class="line">Copyright (C) 2010 Digirati Internet LTDA.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line"></span><br><span class="line">                  SECTORS      ok/corrupted/changed/overwritten</span><br><span class="line">Validating file 1.h2w ... 2097152/        0/      0/      0</span><br><span class="line">Validating file 2.h2w ... 1882432/        0/      0/      0</span><br><span class="line"></span><br><span class="line">  Data OK: 1.9 GB (3979584 sectors)</span><br><span class="line">Data LOST: 0 MB (0 sectors)</span><br><span class="line">       Corrupted: 0.00 Byte (0 sectors)</span><br><span class="line">Slightly changed: 0.00 Byte (0 sectors)</span><br><span class="line">     Overwritten: 0.00 Byte (0 sectors)</span><br><span class="line">Average reading speed: 13.12 MB/s</span><br></pre></td></tr></table></figure><p>Definitely not the fasted drive on the market, but it looks to be working. At this point, I’m thrilled. Time to blow it up!</p><h2 id="Inhibit-Circuity"><a href="#Inhibit-Circuity" class="headerlink" title="Inhibit Circuity"></a>Inhibit Circuity</h2><p>I then flew some wires to the programming pads of the microcontroller. I probably won’t go for a USB bootloader, but I’ll need a better programming method in the future.<br><img src="/img/atmel-header.jpg"></p><p>In the last post I explained how the flash memory’s chip select line is “or’d” with a pin from the microcontroller. This can be used to inhibit the flash. I tested this out, and it worked beautifully. When you try to mount the device, the mount command hangs for 20 seconds, then dmesg spits this out:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[3064125.755814] usb 3-1: reset high-speed USB device number 84 using ehci-pci</span><br><span class="line">[3064125.906688] usb 3-1: device firmware changed</span><br><span class="line">[3064125.906832] sd 6:0:0:0: [sdf] tag#0 FAILED Result: hostbyte=DID_TIME_OUT driverbyte=DRIVER_OK cmd_age=31s</span><br><span class="line">[3064125.906844] sd 6:0:0:0: [sdf] tag#0 CDB: Read(10) 28 00 00 3f 57 80 00 00 08 00</span><br><span class="line">[3064125.906842] usb 3-1: USB disconnect, device number 84</span><br><span class="line">[3064125.906851] I/O error, dev sdf, sector 4151168 op 0x0:(READ) flags 0x80700 phys_seg 1 prio class 2</span><br><span class="line">[3064125.919296] device offline error, dev sdf, sector 4151168 op 0x0:(READ) flags 0x0 phys_seg 1 prio class 2</span><br><span class="line">[3064125.919314] Buffer I/O error on dev sdf1, logical block 518640, async page read</span><br><span class="line">[3064125.920698] /dev/sdf1: Can&#x27;t open blockdev</span><br></pre></td></tr></table></figure><p>This functionality is suitable for actors who might not want their drive to self-destruct but instead appear as a corrupted or broken drive.</p><h2 id="Destruction-Circuitry"><a href="#Destruction-Circuitry" class="headerlink" title="Destruction Circuitry"></a>Destruction Circuitry</h2><p>Finally, we’re getting to the good part. Recall the destruction circuit from the previous post.<br><img src="/img/distruct.png"></p><p>In this circuit C1, C2, D1, and D2 form a voltage doubler. When <code>Distruct_PWM</code> is 0V, C1 will charge to 5V. When <code>Distruct_PWM</code> goes high, the potential across C1 will go to 10V because voltages in series add. This forces current through D2 and will eventually charge C2 to 10V. When I want to kill the flash, I can enable Q1 via <code>Kill_switch</code> and short 10V to 3.3V.</p><p>I started with the original circuitry, which didn’t produce any smoke. However, when I reran our trusty f3read I got this.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[machinehum@whitebox ~]$ sudo f3read mnt/</span><br><span class="line">F3 read 8.0</span><br><span class="line">Copyright (C) 2010 Digirati Internet LTDA.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line"></span><br><span class="line">                  SECTORS      ok/corrupted/changed/overwritten</span><br><span class="line">Validating file 1.h2w ... 2097152/        0/      0/      0</span><br><span class="line">Validating file 2.h2w ... 1372480/   509952/      0/      0</span><br><span class="line"></span><br><span class="line">  Data OK: 1.65 GB (3469632 sectors)</span><br><span class="line">Data LOST: 249.00 MB (509952 sectors)</span><br><span class="line">       Corrupted: 249.00 MB (509952 sectors)</span><br><span class="line">Slightly changed: 0.00 Byte (0 sectors)</span><br><span class="line">     Overwritten: 0.00 Byte (0 sectors)</span><br><span class="line">Average reading speed: 13.52 MB/s</span><br></pre></td></tr></table></figure><p>A lot of the data was intact, but 250MB was corrupted! I upgraded C2 from a 22uF to 122uF via electrolytic in parallel. I could fit 100uF on the board with two 47uF in parallel, but this is all I had lying around. I was paranoid about damaging my PC, so I powered the device with a bench supply.</p><p>I then repeated my experiment.</p><p><img src="/img/smoke.gif"></p><p>After testing the destruction circuit I plugged the drive into my PC. No partition, no block device, no dmesg logs, nothing. It looks like the USB controller IC was fried. To further analyse the damage, I replaced that USB controller IC. The new chip still couldn’t recognize the NAND flash. I think it’s fair to say she’s dead, Jim.</p><h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p><img src="/img/usb-device-asm.png"></p><p>It’s been quite a long process, but I’m thrilled to say I’ve built the first spit-detecting, self-destructing flash drive. If you’re interested in following this project, my socials are below. I’m also planning to do a beta deployment of these devices soon, if this is something you might use, please reach out! I would love to hear your story.</p><hr><p>I also have YouTube content, which can be considered part 2.5 of the series.</p><style>.embed-container {    position: relative;    padding-bottom: 56.25%;    height: 0;    overflow: hidden;    max-width: 100%;  }  .embed-container iframe, .embed-container object, .embed-container embed {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;  }  </style><div class="embed-container"><iframe src="https://www.youtube.com/embed/Wrcy6ySjSu8" allowfullscreen frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"></iframe></div>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2023/02/06/I-Built-a-Self-Destructing-USB-Drive-Part-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>I&#39;m Building a Self-Destructing USB Drive Part 2</title>
      <link>https://interruptlabs.ca/2022/08/31/I-m-Building-a-Self-Destructing-USB-Drive-Part-2/</link>
      <guid>https://interruptlabs.ca/2022/08/31/I-m-Building-a-Self-Destructing-USB-Drive-Part-2/</guid>
      <pubDate>Tue, 30 Aug 2022 22:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;I’m building an open-source USB drive with a hidden obfuscation If you plug the device in normally, it will appear blank, but if you</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>I’m building an open-source USB drive with a hidden obfuscation If you plug the device in normally, it will appear blank, but if you quickly plug it in three times in a row, you will be able to read and write data. We built Ovrdrive for journalists working in hostile environments, security researchers, and anyone interested in open hardware.</p><p align="center"><a href="https://shop.interruptlabs.ca/products/ovrdrive-usb">Device for Sale Now!</a></p><hr><p>This post outlines the design process and challenges. I’ll discuss my bench prototyping, the schematic, layout and mechanical sourcing.</p><p>A lot of the responses to the last post pointed out that the device doesn’t <em>actually</em> self-destruct. In response to these comments, the device will now have two modes: just hiding the data and a full self-destruct (FSD).</p><h2 id="Enclosure"><a href="#Enclosure" class="headerlink" title="Enclosure"></a>Enclosure</h2><p>I found a shop overseas selling USB enclosures without the internals, which saves me from designing an enclosure from scratch. I’ve never designed an injection moulded enclosure before, and today won’t be the day.</p><p><img src="/img/usb_case.jpg"><figcaption>USB Drive Enclosures</figcaption></p><p>Out of the four samples I received, I settled on the black one (far left in the picture above). Unfortunately, the vendor could not give me 3D CAD files, just DXF. If you don’t know, DXF is a simple flat drawing; not ideal, but better than nothing.</p><p><img src="/img/case.png"><figcaption>Drawing of Enclosure</figcaption></p><p>I took these DXF drawings, imported them into FreeCAD, and then extruded them into some 3D models. This was a strange way to draw a model; the DXF lines were converted to undimensioned FreeCAD sketch objects and then extruded. I imported the PCB and ended up here:</p><p><img src="/img/usb.png"><figcaption>Device Render</figcaption></p><p>Hopefully, the final build will come out looking something like that.</p><h2 id="FSD-Full-Self-Destruct"><a href="#FSD-Full-Self-Destruct" class="headerlink" title="FSD: Full Self Destruct"></a>FSD: Full Self Destruct</h2><p>My goal is to build a discrete device; if the cops snatch a journalist in a non-privacy country, they shouldn’t think twice about a loose USB drive. When they plug it in, the device shouldn’t explode, melt, release corrosive material or do anything else insane (even though that would probably make a more exciting blog post). It should quietly destroy itself beyond repair.</p><p>My solution for this is overloading the flash memory voltage rail. I’ll have to say, this is the first time I’ve ever actually looked at the absolute maximum ratings of a component with the intent to go outside them.<br><img src="/img/max_ratings.png"></p><p>The part needs to be pushed over 4.6V in order to be completely disabled. I can use a simple voltage doubler off the 5V line to do this.<br><img src="/img/distruct.png"></p><p>The operation of this circuit is pretty simple. When Distruct_PWM is low, Ca will charge to 4.3V, which is 5V minus the 0.7V drop over the diode. When I set Distruct_PWM high from the MCU, this puts the bottom of Ca at 5, giving a total potential of 9.3V. This flows into Cb and gets trapped for the next cycle. When you want to dump the energy into the flash IC, enable Q1 and say goodbye to those cute dog pics.</p><h2 id="Sensing-Circuit"><a href="#Sensing-Circuit" class="headerlink" title="Sensing Circuit"></a>Sensing Circuit</h2><p>OK, so how will the device know if the user has licked their fingers or not, and hence whether or not to destroy the data? This can be done with a bioimpedance measurement, i.e., a measurement of the resistance of the user’s skin. If the skin’s resistance is low (500k or less), we can assume their fingers are wet. There’s probably a fancy chip to measure bioimpedance, but since the chip shortage, I’ve been inclined to use generic components.<br><img src="/img/cct.png"></p><p>I pinched this circuit from <em>The Art of Electronics</em>; it’s a current supply. Let’s discuss how it works. U1 is a voltage reference; as long as it gets enough current to operate, there will be 2.5V dropped over it. The cathode is connected to R2, while the anode is connected to the non-inverting input of the opamp. The output of the opamp will supply the current required to hold the two inputs at the same voltage. Therefore we can assume there is 2.5V dropped over R2 as well. The current through R2 is then</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mrow><mi>R</mi><mn>2</mn></mrow></msub><mo>=</mo><mfrac><mn>2.5</mn><msub><mi>R</mi><mn>2</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">I_{R2} = \frac{2.5}{R_2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2902079999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.00773em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">.</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><p>Our electrodes are connected across J1, and the voltage at Vx and Vs is again determined by Ohm’s law:</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>x</mi></msub><mo>=</mo><msub><mi>I</mi><mrow><mi>R</mi><mn>2</mn></mrow></msub><mo>⋅</mo><msub><mi>R</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">V_x = I_{R2} \cdot R_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><p>So we can use these two equations to solve for the load resistance, RL:</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>L</mi></msub><mo>=</mo><msub><mi>V</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>⋅</mo><mfrac><msub><mi>R</mi><mn>2</mn></msub><mn>2.5</mn></mfrac></mrow><annotation encoding="application/x-tex">R_L = V_{out} \cdot \frac{R_2}{2.5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.233431em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884309999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">.</span><span class="mord mtight">5</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.00773em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><p>This is what we’ll use to calculate skin resistance.</p><h3 id="Microcontroller"><a href="#Microcontroller" class="headerlink" title="Microcontroller"></a>Microcontroller</h3><p>I chose a simple attiny25 for the brains of the project. It’s a step down from the 32bit ARM chips I typically use. It was refreshing to fit the entire application into 55 lines of code with only one required header.</p><p>I configured a PWM channel to test the code. I read and ADC pin and output the voltage as a duty cycle on the PWM pin. Using my multimeter on DC mode, I read back the voltage I was sampling.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;avr/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PWM PA6</span></span><br><span class="line"><span class="comment">// ADC PA1</span></span><br><span class="line"><span class="comment">// LED PA2</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> R2 = <span class="number">747e3</span>;   <span class="comment">// R2 in schematic</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> Rth = <span class="number">0.4e6</span>;  <span class="comment">// If r &gt; 1Mohm, finger not wet.</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_pwm</span><span class="params">()</span> &#123;</span><br><span class="line">   DDRA |= (<span class="number">1</span> &lt;&lt; PA6);                    <span class="comment">// PA6 as output</span></span><br><span class="line">   OCR1A = <span class="number">0x0000</span>;</span><br><span class="line">   TCCR1A |= (<span class="number">1</span> &lt;&lt; COM1A1);               <span class="comment">// set non-inverting mode</span></span><br><span class="line">   TCCR1A |= (<span class="number">1</span> &lt;&lt; WGM11) | (<span class="number">1</span> &lt;&lt; WGM10); <span class="comment">// set 10bit phase corrected PWM Mode</span></span><br><span class="line">   TCCR1B |= (<span class="number">1</span> &lt;&lt; CS11);                 <span class="comment">// set prescaler to 8 and starts PWM</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_pwm</span><span class="params">(<span class="type">float</span> voltage)</span> &#123;</span><br><span class="line">   OCR1A = ( voltage / <span class="number">5</span> )* <span class="number">0x400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_adc</span><span class="params">()</span> &#123;</span><br><span class="line">    ADMUX &amp;= ~(<span class="number">1</span> &lt;&lt; REFS0); <span class="comment">// Use 5V as reference</span></span><br><span class="line">    ADMUX &amp;= ~(<span class="number">1</span> &lt;&lt; REFS1);</span><br><span class="line">    ADMUX |= (<span class="number">1</span> &lt;&lt; MUX0);   <span class="comment">// Use ADC1 (PA1)</span></span><br><span class="line">    ADCSRB |= (<span class="number">1</span> &lt;&lt; ADLAR); <span class="comment">// Left adjusted (8bit) operation alright</span></span><br><span class="line">    ADCSRA |= (<span class="number">1</span> &lt;&lt; ADEN);  <span class="comment">// Enable ADC</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">read_adc</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> voltage;</span><br><span class="line">    ADCSRA |= (<span class="number">1</span> &lt;&lt; ADSC);</span><br><span class="line">    <span class="keyword">while</span>(ADCSRA &amp; (<span class="number">1</span> &lt;&lt; ADSC)) &#123;&#125;;</span><br><span class="line">    voltage = ADCH;</span><br><span class="line">    voltage = voltage * <span class="number">5</span> / <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">return</span> voltage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    DDRA = <span class="number">1</span> &lt;&lt; PA2; <span class="comment">// LED</span></span><br><span class="line"></span><br><span class="line">    init_pwm();</span><br><span class="line">    init_adc();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">float</span> v, r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        v = read_adc();</span><br><span class="line">        set_pwm(v);</span><br><span class="line">        r = v * (R2/<span class="number">2.5</span>);</span><br><span class="line"></span><br><span class="line">        (r &gt; Rth) ? (PORTA &amp;= ~(<span class="number">1</span> &lt;&lt; PA2)) : (PORTA |= <span class="number">1</span> &lt;&lt; PA2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Build"><a href="#The-Build" class="headerlink" title="The Build"></a>The Build</h2><p>When working for a client, I don’t breadboard. It’s too expensive and doesn’t make sense with modern SMD components. My usual workflow is to go from simulation straight to schematic and board design. But for this project, I reached for the breadboard. I did this in order to derisk the bioimpedance circuit I discussed above. It felt like I was back in school again, nostalgic about DIP components and paper schematics.<br><img src="/img/lick.gif"><figcaption>Let there be light!</figcaption></p><p>The logic works fine. All of the learnings from this prototype were integrated into the final design.</p><p>The next and final post will be documenting the entire build, I’m hoping to then get a small crowdfunding campaign launched to build several of these devices for the community. Stay in touch and happy hacking!</p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2022/08/31/I-m-Building-a-Self-Destructing-USB-Drive-Part-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>I&#39;m Building a Self-Destructing USB Drive</title>
      <link>https://interruptlabs.ca/2022/07/29/I-m-Building-a-Self-Destructing-USB-Drive/</link>
      <guid>https://interruptlabs.ca/2022/07/29/I-m-Building-a-Self-Destructing-USB-Drive/</guid>
      <pubDate>Fri, 29 Jul 2022 12:02:45 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p align=&quot;center&quot;&gt;
&lt;a href=&quot;https://shop.interruptlabs.ca/products/ovrdrive-usb&quot;&gt;Device for Sale Now!&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;Because we all know the</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p align="center"><a href="https://shop.interruptlabs.ca/products/ovrdrive-usb">Device for Sale Now!</a></p><p>Because we all know the best way to keep your data safe is by blowing it up, right?<br><img src="https://cdn-images-1.medium.com/max/1024/1*3NhahmZ5sI8ZNdo98FUSsg.png"></p><p>Well, for most of us, the real answer lies with encryption. But consider this: there are certain countries where it is dangerous to be a journalist. Now pretend you’re investigating political corruption in one of these countries; in such cases, it may not be safe for you to be found with an encrypted drive.</p><p>My idea is to build a USB drive that is cosmetically and functionally identical to your run-of-the-mill USB. But there is one difference: if you plug it in normally, it doesn’t produce any data.</p><p>Now, what’s something a sane person would never do before plugging in an ordinary flash drive? <strong>Lick their fingers.</strong></p><p>That’s right; The drive will have hidden electrodes that measure the resistance of the finger plugging it in. A finger is around 1.5MΩ, but wet fingers are around 500kΩ. When the device boots, the drive will appear blank if the resistance between the electrode pair is higher than a threshold. It’s not the prettiest system, but I think it strikes a nice balance of ridiculousness and functionality. The germaphobes among us can run their fingers under the tap.</p><h4 id="The-Design"><a href="#The-Design" class="headerlink" title="The Design"></a>The Design</h4><p>A flash drive is a relatively simple design electrically. For the first version, I’m going to target USB2.0 speeds.<br><img src="https://cdn-images-1.medium.com/max/822/1*5AksmpJAY73SdXFekJQ43g.png"></p><p>The typical flash drive is composed of a USB controller (blue) connected to a NAND flash chip (red). The flash chip holds all the data, while the controller contains a USB front end and logic to interface with the flash chip. To achieve my desired functionality, ill use a USB controller with a small microcontroller to read the electrodes and inhibit the flash chip if necessary.</p><p>Understanding component economics is essential when designing hardware. The flash chip is <strong>generic</strong> and can be used in anything: smart TVs, computer BIOS, cars, you name it. However, the USB controller is an <strong>application-specific</strong> component for flash drives.</p><p>Application-specific ICs come around when there’s a huge market, and you need to squeeze margins. There might only be a few dozen flash drive companies worldwide, and the engineering is stale. The lion’s share of the volume comes from several huge factories with razor-thin margins. There’s no hot new flash drive startup that’s going to disrupt the market. Digikey or Mouser isn’t the place to look for sourcing application-specific components.</p><p>I scoured the internet for flash drive teardowns, searched the text on the chips, and found a <a href="http://www.pc-3000flash.com/solbase/index.php?lang=eng">gold mine</a>: a flash drive database that lists part numbers for several USB controller ICs. I then checked to see if I could get a datasheet and a vendor — I settled on the SM3257EN.<br><img src="https://cdn-images-1.medium.com/max/526/1*WzMwtEIlDvDrRhlVkKydTA.png"><figcaption>SM3257EN Block diagram</figcaption></p><p>This chip looks like it should do the trick; the datasheet is well written and has enough information. I created the part in Kicad and imported it with a NAND flash chip and USB jack.</p><p>I now have to make the device hide the data unless the user licks their fingers.</p><p>A chip enable (CE) signal from the USB controller is designed to connect straight to the flash chip. When this signal is low, the flash chip will enable. I will use an &quot;or gate&quot; with my control signal to turn force the memory off.<br><img src="https://cdn-images-1.medium.com/max/724/1*7iut5aVjWoNkCJbMzP3jbA.png"></p><p>When my inhibit signal is high, it doesn’t matter if the status of CE. The output of the gate will be high, which disables the flash memory.</p><p>As for controlling the inhibit signal itself, I’m going to use an <a href="https://www.digikey.ca/en/products/detail/microchip-technology/ATTINY24A-CCUR/2357342">ATTINY24</a>, and a transconductance amplifier hooked up to the electrodes. I’ll get more into that next post.</p><h4 id="The-Mission"><a href="#The-Mission" class="headerlink" title="The Mission"></a>The Mission</h4><p>I’m trying to build hardware that solves problems and builds a community. If you think you might have a use for the hardware in this post or would like to help out, I would love to hear from you. I’ve created a <a href="https://discord.gg/EtZT7mjNuM">Discord</a> server with like-minded people! Everything is on <a href="https://github.com/o7-machinehum/ovrdrive">github</a>!<br><img src="https://cdn-images-1.medium.com/max/799/1*qaew9czYRuC--KSqTZQRDg.png"></p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2022/07/29/I-m-Building-a-Self-Destructing-USB-Drive/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Shit Happens when you Fork Naked</title>
      <link>https://interruptlabs.ca/2022/06/21/Shit-Happens-when-you-Fork-Naked/</link>
      <guid>https://interruptlabs.ca/2022/06/21/Shit-Happens-when-you-Fork-Naked/</guid>
      <pubDate>Tue, 21 Jun 2022 08:38:08 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;If you develop software, a fork isn’t just a utensil. It indicates a divergence in a codebase. Code gets forked for several reasons,</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>If you develop software, a fork isn’t just a utensil. It indicates a divergence in a codebase. Code gets forked for several reasons, different opinions, access rights, making a pull request into the upstream repository, etc. There is the correct way to fork software. Then there’s what I call a naked fork. A naked fork is summarized below.</p><pre>git clone [git@github.com](mailto:git@github.com):someone/something.gitcd somethingrm -rf .gitgit initgit add *git commit . “First commit, forked from something” git remote set-url origin [git@github.com](mailto:git@github.com):me/something.gitgit push</pre><p>If you don’t understand what’s happening here, I’ll explain. You start by cloning someone else codebase. Then nuke all the history by deleting the .git folder, creating another git repository, and then pushing it to your empty repository. You will have one initial commit in the repository, which contains the entire old repository, which could be millions of lines of code.</p><p>Let me explain why this is a terrible thing to do.</p><p>I’m working on a single board computer project similar to the RaspberryPi. However, mine is much less well known. I’m using a Lindenis V5, which boasts an Allwinner V5: a quad-core 1.5Ghz processor that you can buy in bulk for less than 10$. For those that don’t know about getting a microprocessor to boot an OS, there are three required components: userspace, kernel and bootloader. The userspace consists of all the applications you need to interact with the system, commands like ls, bash and cd. The bootloader initializes some hardware: the ram, EMMC and power supplies. It then gets things ready for the kernel. The kernel then boots as the interface layer between the hardware and userspace. The vendor has provided some support, an image containing an old Debian fork using a 4.4 kernel and a uboot repo from 2014 that doesn’t build and the source for the image.</p><p>The vendor-provided image is too old for what I’m working on, so I need to build my own image. I’m trying to determine when the vendor forked uboot, understand their diff from the mainline and integrate those into a newer version of uboot and upstream it. However, since it’s a naked fork, I have no clue where the actual fork point is. I checked the git logs, but the code is way older than the commit times are indicating, which means this is what the vendor did.</p><pre>git clone [git@github.com](mailto:git@github.com):someone/something.gitcd somethingrm -rf .git# Spend two years making your changes. git initgit add *git commit . “First commit, forked from something” git remote set-url origin [git@github.com](mailto:git@github.com):me/something.gitgit push</pre><p>I need to correlate two git repositories which are essentially time-series databases. The command required to diff two folders and count the different lines looks like this.</p><pre>diff -rN -x .git ~/path/to/repo1 ~/path/to/repo2 | wc -l</pre><p>To determine the ancestry, checkout the head of the original repository, run this command, decrement one commit, rerun it, and repeat. After running this loop for three days, you get something like this.<br><img src="https://cdn-images-1.medium.com/max/1000/1*xLFqwl5nupb25FLpOSKQPQ.png"></p><p>The global minima indicate the most similar repositories, so that’s where the fork happened. I checked out this point and went from there.</p><p>Incompetency isn’t the only plot going on here. Chip manufacturers don’t seem to understand that these open-source tools are what breathe life into their products. Vendors should work with the open source community, not expecting volunteers to support their hardware by reverse engineering RAM initialization binaries (store for another time). Sometimes your average Joe can’t get a datasheet, which isn’t how things should work.</p><p>We should all strive to build software that enables hardware to do amazing things and remember: shit happens when you fork naked.</p><p><img src="https://cdn-images-1.medium.com/max/439/1*jLKPcodaqjUM0Pczw-qkMg.png"></p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2022/06/21/Shit-Happens-when-you-Fork-Naked/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Flashing the RP2040 with a Jlink and OpenOCD</title>
      <link>https://interruptlabs.ca/2022/03/08/Flashing-the-RP2040-with-a-Jlink-and-OpenOCD/</link>
      <guid>https://interruptlabs.ca/2022/03/08/Flashing-the-RP2040-with-a-Jlink-and-OpenOCD/</guid>
      <pubDate>Tue, 08 Mar 2022 08:42:14 GMT</pubDate>
      
        
        
          
          
      <description>&lt;blockquote&gt;
&lt;p&gt;Raspberry Pi Pico is a tiny, fast, and versatile board built using RP2040, a brand new microcontroller chip designed by</description>
          
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>Raspberry Pi Pico is a tiny, fast, and versatile board built using RP2040, a brand new microcontroller chip designed by Raspberry Pi in the UK. — Raspberry Pi People</p></blockquote><p>I picked up a Pico for a couple of bucks to try it out. In a time of extreme scarcity and shortage in silicon, I’ve started evaluating different options, and the RP2040 is very available. It hosts a dual Cortex M0+ processor with 264k RAM and all the usual peripherals. However, it lacks flash. The chip requires an external QSPI flash to hold the program instructions.<br><img src="https://cdn-images-1.medium.com/max/687/1*Uu8Z74Z2he-8lcompmJlXw.png"></p><p>To program the chip, you hold the boot button while plugging in a USB cable; the chip will come up as a mass storage device. Then drag and drop in the image. This would be incredible functionality if I needed a client to flash their device. However, for development, I reached for my Jtag programmer.</p><p>It seems like most people are using the Pico Probe, which is another Pico board acting as a programmer. This is an excellent solution for someone that doesn’t have a Jtag debugger, but I only have a Jlink and don’t want to buy another Pico just yet.</p><p>Let’s get going: start by removing openocd. The version of openocd for this is not upstreamed yet.</p><pre>git clone https://github.com/raspberrypi/openocd.gitcd openocd ./bootstrap ./configure --enable-picoprobemake -j$(nproc)sudo make install</pre><p>As for wiring…</p><ul><li><strong>Pico SWDIO</strong> to <strong>Jlink SWDIO, Pin 7</strong></li><li><strong>Pico SWCLK</strong> to <strong>Jlink SWCLK, Pin 9</strong></li><li><strong>Pico GND</strong> to <strong>Jlink GND</strong></li><li>**Pico 3V3(OUT), Pin 36 **to <strong>Jlink VTref, Pin 1</strong></li><li>**Pico RUN, Pin 30 **to <strong>Jlink RESET, Pin 15</strong></li></ul><p>Here is the flash script I got working.</p><pre>#!/bin/bash</pre><pre>openocd -f interface/jlink.cfg -c &quot;transport select swd&quot; -c &quot;adapter_khz 6000&quot; -f target/rp2040.cfg  -c &quot;program blink.elf reset exit&quot;</pre><p>Good luck!</p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2022/03/08/Flashing-the-RP2040-with-a-Jlink-and-OpenOCD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Upcycling laptop memory for single-board computers?</title>
      <link>https://interruptlabs.ca/2022/01/23/Upcycling-laptop-memory-for-single-board-computers/</link>
      <guid>https://interruptlabs.ca/2022/01/23/Upcycling-laptop-memory-for-single-board-computers/</guid>
      <pubDate>Sun, 23 Jan 2022 13:59:41 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;A few weeks ago, I headed to my local computer shop in search of affordable RAM. &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>A few weeks ago, I headed to my local computer shop in search of affordable RAM. <a href="https://machinehum.medium.com/im-not-putting-a-wifi-router-into-a-phone-charger-7b36e90ee08d">Due to the chip shortage</a>, I have had to become creative lately in how I source parts for prototyping. My idea was to buy older DDR3 laptop RAM, remove the chips, and then repurpose them for my current project. I wasn’t sure if it was going to work, but I figured it was better than waiting for a twelve-month lead time.</p><p>The shop I went to was advertised from the outside as a bookstore and internet café. I wandered around the store for a bit looking at used books, slowly working up to courage to ask the cashier if they actually did sell computer parts. When I finally asked, the employee looked at me, confused for a second, and then, after mumbling something about “Mike” not being in today, brought me to a dingy back room where they kept unorganized bins of assorted cables and used parts.</p><p>After fumbling around for a while I eventually found the “RAM bin”, complete with DDR3L. “How much for four of these?” I asked the employee.</p><p>“Uh, I don’t know, $2 each?”</p><p>It took some back-and-forth, but I eventually convinced him to take $20.</p><p>This encounter got me thinking about all the bins in garages and small-town internet cafés everywhere that are chock full of RAM that’s obsolete for laptops, but perfectly useable for single-board computers (SBCs). Right now, the cheapest 256MB RAM <a href="https://www.digikey.ca/en/products/detail/etron-technology-inc/EM6HD08EWAHH-12IH/10499996">chips</a> I can find are $17 each. I just found 64 chips for $20, or 31¢ each. There has to be an economic incentive here. So here’s my latest idea: removable RAM for SBCs.</p><p>The gist of it is simple; I want to create an open standard similar to the model of <a href="https://en.wikipedia.org/wiki/SO-DIMM">SO-DIMM</a> used in laptops.<br><img src="https://cdn-images-1.medium.com/max/651/1*986XpITzBuPjIRh5as0g0A.png"></p><p>Pictured above is a board with four RAM chips and a board-to-board connecter on the other side. This would be plugged into an SBC much like removable EMMC memory.<br><img src="https://cdn-images-1.medium.com/max/1024/1*ohGgEYLMKAnwwCsp64f4DQ.png"><figcaption>Raspberry PI with removable RAM</figcaption></p><p>With this standard, old DDR3 laptop RAM might be given new life. By upcycling the RAM from the SO-DIMM to this new format, they can be readily plugged into memory testing units (a practice that is much harder to execute with raw chip packages). This gives distributors, manufacturers and consumers confidence that the hand-me-down RAM will work on their SBC.</p><p>Another advantage of this platform pertains to inventory. Traditionally, SBCs are sold with varying amounts of RAM, allowing the end-user to choose the board that fits their requirements. Instead, manufacturers could produce a single board and customize the memory to order, thereby eliminating excess inventory of “undesirable memory options”. This flexibility also extends to the end-user, allowing them to swap out or upgrade RAM as needed for their project.</p><p>To me, one of the most interesting advantages of this configuration is that it provides raw access to the data and address lines of the processor.</p><blockquote><p>Microlesson: Whenever the CPU wants to read some data from RAM, it puts the data’s address on the address bus. The RAM then reads in this address and presents the data on the data bus. When the CPU wants to write back to RAM, it will put data and the address on the corresponding busses. This all happens extremely fast; it’s actually one of the fastest ways a processor can exchange data with an external device.</p></blockquote><p>But the RAM doesn’t have to be the only thing listening on the address bus. For example, I could develop a (removable) board with both RAM and an FPGA, adopting the same standard I’m proposing above. The processor would then be able to address registers on the FPGA at RAM speeds, essentially making it a nifty coprocessor for specific tasks.</p><p>As a concrete example, say I wanted to develop a highspeed camera with a RAW <a href="https://en.wikipedia.org/wiki/Active-pixel_sensor">CMOS sensor</a>. I wouldn’t be able to interface the camera directly to the processor because the data rate is so high. Instead, I could connect the camera to an FPGA board like the one I proposed above. While recording, the FPGA would do the necessary processing of the RAW camera data and then dump that processed data to memory. After recording, the processor can come at its leisure and read this data. This is how most high-speed cameras actually work.</p><p>By now, I hope I have convinced you that removable RAM for SBCs is a good idea. Would it be the single most important invention in the fight against E-waste? Probably not. Would it significantly reduce cost and inventory barriers for hobbyists and professionals alike? I think so. Would it allow for more design flexibility for prototyping? Would having a high-speed interface to the processor enable more complex designs? Absolutely.</p><p>My next SBC design will feature removable RAM.</p><p>If you’re interested in discussing or contributing to this project, consider joining the <a href="https://discord.com/invite/EtZT7mjNuM">Discord</a> community. Here is the <a href="https://github.com/o7-machinehum/F-MOMM">gihub for the project.</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2022/01/23/Upcycling-laptop-memory-for-single-board-computers/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>I put a WiFi router into a phone charger (Final Post)</title>
      <link>https://interruptlabs.ca/2021/10/25/I-put-a-WiFi-router-into-a-phone-charger-Final-Post/</link>
      <guid>https://interruptlabs.ca/2021/10/25/I-put-a-WiFi-router-into-a-phone-charger-Final-Post/</guid>
      <pubDate>Mon, 25 Oct 2021 15:40:42 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h3 id=&quot;Up-Until-Now&quot;&gt;&lt;a href=&quot;#Up-Until-Now&quot; class=&quot;headerlink&quot; title=&quot;Up Until Now&quot;&gt;&lt;/a&gt;Up Until Now&lt;/h3&gt;&lt;p&gt;The WifiWart is a powerful</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h3 id="Up-Until-Now"><a href="#Up-Until-Now" class="headerlink" title="Up Until Now"></a>Up Until Now</h3><p>The WifiWart is a powerful embedded Linux WiFi security device hiding inside a phone charger. It is akin to the WiFi Pineapple without looking malicious. Over the length of the project, I’ve had plenty of comments telling me to buy a single-board computer (SBC), jam in an existing enclosure, and call it done. If I was trying to build a one-off device for personal use, this is what I would do. But this project isn’t for me; it’s for the community. In the past six months, I’ve designed a completely open source SBC boasting a 1.2Ghz quad-core processor, 1GB of DDR3 RAM, two WiFi radios, a USB port and all the power supplies to convert mains electricity to the required voltages for the processor. In addition to the electronics, firmware and mechanical design open source, the CAD software used in the design is also open source. I did this intentionally, as having an open source design in Altium or Solidworks is pointless because nobody will shell out 10k+ for software to view my design. That being said, <em>I hope you enjoy the final post :).</em></p><h3 id="The-Build"><a href="#The-Build" class="headerlink" title="The Build"></a>The Build</h3><p>Before starting, I should say: working with mains electronics is inherently dangerous. If you choose to do so, this is solely at your own risk.</p><p>I started by 3D printing the enclosure. The print was done in PLA with my Monoprice Mini.<br><img src="https://cdn-images-1.medium.com/max/936/0*EZRHwkbNy73TFmqR"></p><p>It was then time to assemble the two boards. Board assembly usually follows this process.</p><ol><li>Solder paste is applied using a solder stencil.</li><li>Tweezers are used to place all the parts on the boards.</li><li>Boards are heated using a reflow oven or hotplate.</li><li>The solder paste reflows in a molten state, creating permanent solder joints.<img src="https://cdn-images-1.medium.com/max/936/0*tRCMcQhRfe2S46ts"><figcaption>Compute Boards on the hotplate</figcaption></li></ol><p>Most of the board uses 0402 size passive components, which are 1mm x 0.5mm. These are some of the many components that are soldered on the board.<br><img src="https://cdn-images-1.medium.com/max/876/1*FYzkU5yUzrQaRIDGD8r0JQ.png"></p><p>After the compute boards were finished, I built and tested the power boards.<br><img src="https://cdn-images-1.medium.com/max/705/0*uqMe-7B0h_ao5cUt"><figcaption>Fire Extinguisher not pictured</figcaption></p><p>Newer readers may not be aware, but the power board stacks above the compute board as pictured below. The power board is responsible for converting mains to 5V and creating all the other voltage rails required by the central processor. The compute board houses the microprocessor, RAM, WiFi radios etc. For lots of details on the electrical design, you might find <a href="https://machinehum.medium.com/im-putting-a-wifi-router-into-a-wall-charger-part-1-882df714bbf3">Part 1</a> interesting.<br><img src="https://cdn-images-1.medium.com/max/543/1*DQUJaicHDfcbn5Jh3vH1iw.png"></p><p>I then glued the contacts into the enclosure; these parts will be over-moulded during the injection moulding process in the final design. It’s essential these contacts are secure in the device; if they come off in an outlet, someone would get hurt. I wouldn’t trust my glue job for anything other than a prototype handles by myself alone.<br><img src="https://cdn-images-1.medium.com/max/503/1*lMgCb2n1q3J12lgeTu61iQ.png"></p><p>The mains blade contacts interface to the PCB through friction fit contacts are shown below.<br><img src="https://cdn-images-1.medium.com/max/1024/1*MIevw3FunlHJHiPaJ_TLlA.png"></p><h3 id="Final-Assembly"><a href="#Final-Assembly" class="headerlink" title="Final Assembly"></a>Final Assembly</h3><p>After six months, I finally have the prototype completed. I flashed the OS to the SD card, fired it up, and the UART logs looked fine. If you want more details about what I just said, <a href="https://machinehum.medium.com/im-putting-a-wifi-router-into-a-wall-charger-part-2-bf04c779c905">part two</a> has lots of details on building and configuring the OS.<br><img src="https://cdn-images-1.medium.com/max/1024/1*-xMwGgppYCwFHKae1DN4wA.png"><figcaption>Proto 1</figcaption></p><h3 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next"></a>What’s next</h3><p>I was planning on getting a crowdfunding campaign going, but the chip shortage ruined those plans for now (more on the chip shortage in <a href="https://machinehum.medium.com/im-not-putting-a-wifi-router-into-a-phone-charger-7b36e90ee08d">part three</a>). I don’t want to pivot over to other untested chips, so the crowdfunding will have to wait. I want to thank all the support I have received through the security and open source community.</p><p>I own and operate a small consulting company; if you or anyone else needs help with this type of engineering work, I would love to hear from you!</p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2021/10/25/I-put-a-WiFi-router-into-a-phone-charger-Final-Post/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Bluetooth WarDriving with the nRF52</title>
      <link>https://interruptlabs.ca/2021/10/15/Bluetooth-WarDriving-with-the-nRF52/</link>
      <guid>https://interruptlabs.ca/2021/10/15/Bluetooth-WarDriving-with-the-nRF52/</guid>
      <pubDate>Fri, 15 Oct 2021 08:47:30 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;The nRF52 is a very popular Bluetooth chip that has taken over most of the wireless embedded space. The system-on-chip (SoC) houses an</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>The nRF52 is a very popular Bluetooth chip that has taken over most of the wireless embedded space. The system-on-chip (SoC) houses an ARM Cortex M4 and 2.4Ghz radio to implement various wireless protocols. In this tutorial, I want to walk through setting up a Zephyr RTOS environment and building&#x2F;flashing some code to do some wardriving.</p><p>But first, what is wardriving?</p><blockquote><p><strong>Wardriving</strong> is the act of searching for Wi-Fi wireless networks, usually from a moving vehicle, using a laptop or smartphone.&gt; — Wikipedia</p></blockquote><p>We’re going to do some “Bluetooth wardriving”, and we’re not going to be driving. I’m planning on “forgetting” a battery-powered nRF52 in a public space for a few days and see what sort of Bluetooth data we can collect.</p><p>If you’re following along at home, you’re going to need the following things.</p><ul><li>nRF52DK, I’m using PCA10040</li><li>Unix system or WSL</li></ul><p>I’m going to be using Zephyr RTOS, so before getting started, <a href="https://docs.zephyrproject.org/latest/getting_started/index.html">do all this</a> and install <a href="https://www.nordicsemi.com/Products/Development-tools/nRF-Command-Line-Tools">nrfjprog</a>.</p><h3 id="Project-Requirements"><a href="#Project-Requirements" class="headerlink" title="Project Requirements"></a>Project Requirements</h3><p>Before we start, it’s a good idea to define where we want to end up. I’ll list some requirements below.</p><ol><li>The device can scan for nearby Bluetooth devices.</li><li>The device can timestamp the data.</li><li>The device can keep the addresses in non-volatile memory</li><li>The device is battery-powered and lasts for days.</li></ol><h3 id="Building-Flashing-Blinky"><a href="#Building-Flashing-Blinky" class="headerlink" title="Building &#x2F; Flashing Blinky"></a>Building &#x2F; Flashing Blinky</h3><p>Please keep in mind code prefixed with “$” are bash commands, while code with no prefix is output. To conserve space, I haven’t displayed all output. Start by navigating to the zephyr folder and update. I am assuming you checked out zephyrproject right in your home directory.</p><pre>$ cd ~/zephyrproject/zephyr/$ west update$ ls boards/arm | grep nrf52dk</pre><p>You should get an output of all the nrf52dk boards. Most likely, you want nrf52dk_nrf52832. So let’s build some simple firmware for that board.</p><pre>$ cd samples/basic/blinky$ west build -b nrf52dk_nrf52832$ west flash</pre><p>You should now get a blinking light. What a pain in the ass; feel free to turn back and use Segger Studio forever.</p><h4 id="Device-Tree"><a href="#Device-Tree" class="headerlink" title="Device Tree"></a>Device Tree</h4><p>A keen observer would note that samples&#x2F;basic&#x2F;blinky&#x2F; is not related to any specific hardware. Blinky knows the correct GPIO for this LED using the nrf52 device tree file.</p><pre>$ cd ~/zephyrproject/zephyr/ # Move back to the project root$ find . -name nrf52dk_nrf52832.dts./boards/arm/nrf52dk_nrf52832/nrf52dk_nrf52832.dts</pre><p>Take a look at that dts file and look for a “led0”. The device tree file provides information to a generic project about a specific board. Device tree is extremely powerful and used all around the Linux Kernel. If you want to understand the ins and outs of Device Tree, I would recommend this video, but I will talk more about it later on.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fm_NyYEBxfn8%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dm_NyYEBxfn8&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fm_NyYEBxfn8%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no">[https://medium.com/media/e1669fa084eac77c221689f8994cb330/href](https://medium.com/media/e1669fa084eac77c221689f8994cb330/href)</iframe><h4 id="Config-Files"><a href="#Config-Files" class="headerlink" title="Config Files"></a>Config Files</h4><p>Before we move on, it’s important to understand the config system. These are files of the form: *.conf and *_defconfig. You can edit these files manually or with menuconfig. After launching west build you should see something like this.</p><pre>Loaded configuration '(path)/nrf52dk_nrf52832_defconfig'</pre><p>Open this file up and take a look. This is the base config for your board. There is also an prj.conf in the blinky folder, and this gets merged with the base config and written to build&#x2F;zephyr&#x2F;.config . Let us take a look at menuconfig.</p><pre>west build -t menuconfig</pre>![](https://cdn-images-1.medium.com/max/630/1*8KMk5DvUf57L9rcrcWoneA.png)<figcaption>menuconfig</figcaption><p>Menuconfig is an interface to enable and disable settings; these settings will get saved to a config file.</p><h3 id="Bluetooth-Central"><a href="#Bluetooth-Central" class="headerlink" title="Bluetooth Central"></a>Bluetooth Central</h3><p>Let’s do something with Bluetooth! We want to develop a device that scans for other Bluetooth devices. This is called a “Central” in Bluetooth speak.</p><pre>$ cd ~/zephyrproject/zephyr/samples/bluetooth/central_hr$ west build -b nrf52dk_nrf52832$ west flash$ screen /dev/ttyACM0 115200 # Or whatever ACM you are# Now reset the board, you should see something like this \/</pre><p><img src="https://cdn-images-1.medium.com/max/544/1*-EfGxxdtvQRNbUP2-uvZ6Q.png"></p><p>These are the MAC addresses of nearby Bluetooth devices. <a href="https://pastebin.com/raw/YUv7CLKm">Here is a more extended output</a>. I want to log these MAC’s with their Received Signal Strength Indicator (RSSI) and a timestamp. I want to use non-volatile memory, so that brings us to the next part.</p><h3 id="SD-Card"><a href="#SD-Card" class="headerlink" title="SD Card"></a>SD Card</h3><p>SD cards are a cheap and easy way to log some data from a microcontroller. They usually use SDIO but can also work over SPI. I had an Arduino SD card breakout lying around.<br><img src="https://cdn-images-1.medium.com/max/1024/1*X6EnJeYw89jhe3HpZvdXhg.jpeg"><figcaption>Arduino SD card interface</figcaption></p><p>Most Arduino’s are 5V logic level while SD cards are 3.3V. This board has a 3.3V regulator and a level shifter to convert the logic levels. As the nRF52 is 3.3V, I ripped all that off and made the required modifications to interface directly. Let’s go to the fatfs project folder.</p><pre>cd ~/zephyrproject/zephyr/samples/subsys/fs/fat_fs</pre><p>Fatfs is a project created by <a href="http://elm-chan.org/fsw/ff/00index_e.html">Elm Chan</a> which allows microcontrollers to recognize filesystems, specifically FAT and FAT32 filesystems. We can use fatfs to log data to the SD card. Take a look in the boards folder. We can see some *.conf and *.overlays files.</p><h4 id="Device-Tree-Overlays-and-Configs"><a href="#Device-Tree-Overlays-and-Configs" class="headerlink" title="Device Tree Overlays and Configs"></a>Device Tree Overlays and Configs</h4><p>Device Tree overlays are special files that get laid on top of base device tree files. Let’s take a look in nrf52840_blip.overlay</p><pre> &amp;spi1 {        status = &quot;okay&quot;;        cs-gpios = &lt;&amp;gpio0 17 GPIO_ACTIVE_LOW&gt;;        sdhc0: sdhc@0 {                compatible = &quot;zephyr,mmc-spi-slot&quot;;                reg = &lt;0&gt;;                status = &quot;okay&quot;;                label = &quot;SDHC0&quot;;                spi-max-frequency = &lt;24000000&gt;;        };};</pre><p>This file is overlaying some information into spi1, it’s telling the build system that we want to use the spi1 bus for sdhc0 which is the sd card driver. We’re also specifying a chip select line. If we look inside nrf52840_blip.conf</p><pre>CONFIG_DISK_DRIVER_SDMMC=yCONFIG_SPI=y</pre><p>We can see this config file is turning on spi and sdmmc. We now want to copy the nrf52840_blip files for use in our boards.</p><pre>cd boardscp nrf52840_blip.overlay nrf52dk_nrf52832.overlaycp nrf52840_blip.conf nrf52dk_nrf52832.confcd ..west build -b nrf52dk_nrf52832</pre><p>Since your build board has the same name as the overlay’s, you should see something that says “Found devicetree overlay” and “Merged configuration” in your build spew. West will put the final device tree file in build&#x2F;zephyr&#x2F;zephyr.dts , you can open this up and see sdhc0 nesting inside spi1.</p><pre>spi1: spi@40004000 {    #address-cells = &lt; 0x1 &gt;;    #size-cells = &lt; 0x0 &gt;;    reg = &lt; 0x40004000 0x1000 &gt;;    interrupts = &lt; 0x4 0x1 &gt;;    status = &quot;okay&quot;;    label = &quot;SPI_1&quot;;    compatible = &quot;nordic,nrf-spi&quot;;    sck-pin = &lt; 0x1f &gt;;    mosi-pin = &lt; 0x1e &gt;;    miso-pin = &lt; 0x1d &gt;;    cs-gpios = &lt; &amp;gpio0 0x11 0x1 &gt;;    sdhc0: sdhc@0 {        compatible = &quot;zephyr,mmc-spi-slot&quot;;        reg = &lt; 0x0 &gt;;        status = &quot;okay&quot;;        label = &quot;SDHC0&quot;;        spi-max-frequency = &lt; 0x16e3600 &gt;;    };};</pre><p>You can then convert those hex values after sck-pin, mosi-pin, miso-pin to get your SD card wiring, and bob’s your uncle. Flash the board with west flash and open a serial port like before, pop in an SD card and reset your board — you should see <a href="https://pastebin.com/raw/X3APGksj">something like this</a>.</p><h3 id="New-Project"><a href="#New-Project" class="headerlink" title="New Project"></a>New Project</h3><p>It’s about time we start to build our app. I want to <a href="https://github.com/zephyrproject-rtos/example-application">fork this app</a> and make it our own.</p><pre>$ west init -m https://github.com/zephyrproject-rtos/example-application --mr main my-workspace$ cd my-workspace$ west update$ cd example-project$ west build</pre><p>I had issues building this, so I wiped out most of the code and pulled in some of the other stuff we <a href="https://github.com/o7-machinehum/nRF52_War_Driving/blob/d09d4706e515ff42ddd0df914f0a82f19c70ca09/app/src/main.c">worked on before.</a> You can see I’ve stripped out most of the existing Bluetooth code, as we’re only concerned with scanning for other Bluetooth devices right now. I pulled in the SD card stuff and tested it. I encourage you to look through <a href="https://github.com/o7-machinehum/nRF52_War_Driving">the repository</a>. The repository is open so that anyone can expand on the project.</p><h4 id="One-Small-Hiccup"><a href="#One-Small-Hiccup" class="headerlink" title="One Small Hiccup"></a>One Small Hiccup</h4><p>I noticed one of the LEDs on the board was flickering. This wiring isn’t ideal as I want to dead drop the device for days and flicker a pointless LED is very power hungry. I looked into the board’s schematic, and it turned out my chip select (CS) pin for my micro SD card was sharing a pin with LED1!<br><img src="https://cdn-images-1.medium.com/max/275/1*IKiw7lijnwmf-X5b60es_g.png"></p><p>I changed the device tree file to use another pin, moved the jumper over and starting have issues mounting the drive. Looking at the schematic above, you can see the pin is being pulled high to Vdd through R1. When the SD card is powered on without the pullup, something goes wrong in the hardware. I added this pullup with a regular 10k, and it started working.</p><h3 id="The-Drop"><a href="#The-Drop" class="headerlink" title="The Drop"></a>The Drop</h3><p>With everything in place, it’s time for the dead drop. I opted for an old pelican case buried in the dirt.<br><img src="https://cdn-images-1.medium.com/max/963/0*Ea4dGXYpCjbX0MND"><figcaption>Just in case someone thought it was a bomb.</figcaption></p><p>While doing my usual 2 AM workout, I tripped, launching the device into a nearby hole. As I pulled my back at the gym, I couldn’t bend over to pick it up, so the only safe thing to do was bury the device and pick it once I had healed.</p><h3 id="The-Retrieval"><a href="#The-Retrieval" class="headerlink" title="The Retrieval"></a>The Retrieval</h3><p>Once my back healed up, I picked up the drop. I slammed together a quick <a href="https://github.com/o7-machinehum/nRF52_War_Driving/blob/main/py/main.py">python script</a> to analyze the data, and it reported there were 7054 MAC addresses discovered and 799 unique MAC addresses! A keen code observer would note that I imported a little API for finding the vendors as well. I then plotted this.<br><img src="https://cdn-images-1.medium.com/max/701/1*1Qf0RvHGn6Uh9XjPEMcRxw.png"></p><h3 id="Moving-Forward"><a href="#Moving-Forward" class="headerlink" title="Moving Forward"></a>Moving Forward</h3><p>I want to continue my wardriving work but up the ante with location inference. In the dataset, we have the RSSI strength, which is correlated to distance from the device. RSSI gives a magnitude of a vector with the angle θ unknown.<br><img src="https://cdn-images-1.medium.com/max/512/0*xCyz5Stb89x8vuNh"><figcaption>θ Unknown</figcaption></p><p>With some basic knowledge of the environment, i.e. people won’t be standing on obstacles. We can reduce the number of solutions. We can reduce the solutions set again by looking at the time series and understanding people won’t be jumping from place to place. Perhaps one day, we can fully track people just with Bluetooth.</p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2021/10/15/Bluetooth-WarDriving-with-the-nRF52/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>I&#39;m not putting a WiFi router into a phone charger (Part 3)</title>
      <link>https://interruptlabs.ca/2021/09/22/I&#39;m-not-putting-a-WiFi-router-into-a-phone-charger-Part-3/</link>
      <guid>https://interruptlabs.ca/2021/09/22/I&#39;m-not-putting-a-WiFi-router-into-a-phone-charger-Part-3/</guid>
      <pubDate>Wed, 22 Sep 2021 10:19:07 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;There are two classes of problems in the world: stupid and interesting. Building a fusion reactor is an interesting problem, while a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>There are two classes of problems in the world: stupid and interesting. Building a fusion reactor is an interesting problem, while a thorn in your finger is a stupid problem. Typically you don’t like working on stupid problems. You want them gone. A job dealing with primarily stupid problems may be considered a shitty job. Currently, I’m working on some really stupid problems. Let’s read an email from my friend Mia.</p><blockquote><p>As you know, the Texas IC components are tight supply, most components are out of stock, just some agents in market have limited inventory, but these agents seized this change to increase the cost maliciously, some IC components even increased 1000 times, but still hot selling. This is really bad situation for both of us. Fortunatelly, this IC still has 3000pcs in stock, but frankly speaking, cost is a little expensive, the unit price is 49.7usd&#x2F;pcs based on EXW, and the quotation is valid for 3 days.</p></blockquote><p>Mia is an electronics broker from Shenzhen; she hustles around components and connects engineers in North America to electronics dealers in Shenzhen. She is also trying to sell me a TI PMIC available on Digikey (3 months ago for $1.2) for $50. I’m using 4x of these PMICs on my board. You now see my problems; we are in a severe chip shortage.</p><h3 id="Sourcing-Electronics"><a href="#Sourcing-Electronics" class="headerlink" title="Sourcing Electronics"></a>Sourcing Electronics</h3><p>Sourcing components for prototyping is usually straightforward; your CAD software will generate you a CSV BOM, you upload it to Digikey, and parts show up at your front door. I’ve gone through Mouser, Digikey, LCSC, Aliexpress, and my friend Mia to get parts for this build. You arrive at a costly prototype when you add up the combined shipping costs, parts costs, and duties.<br><img src="https://cdn-images-1.medium.com/max/1024/1*yPWuqyUht7UZUgRTSs-bPA.png"><figcaption>Graphical Guide to Sourcing Electronics</figcaption></p><p>That’s enough complaining about the shortage; let’s talk about the power board design.</p><h3 id="Power-Board-Design"><a href="#Power-Board-Design" class="headerlink" title="Power Board Design"></a>Power Board Design</h3><p><img src="https://cdn-images-1.medium.com/max/708/0*a8Z9AtYRRrrUSmeu"><figcaption>Boards with no components</figcaption></p><p>There are two boards in the design, they stack on top of each other, and both serve two separate functions. The compute board contains the SOC, RAM, SD card, USB and 2x wifi radios. The power board converts (100–300VAC) to 1.1V, 1.35V, 2.5V, 3.0V, 3.3V and 5VDC. It uses a flyback power module to do the mains to 5V conversion.<br><img src="https://cdn-images-1.medium.com/max/1024/1*_sQUV1u1D7oWjY0G-CvM-w.png"><figcaption>Flyback Design</figcaption></p><p>CUI has developed a nice part to do the heavy lifting; the PBO-5C-5 is a 5W AC to DC converter mounted in a SIP package. It can take anywhere from 80–300VAC and will output 5VDC. I chose this device for its UL certification. When designing a mains powered device, safety is always top of mind; a poorly designed device can catch fire. The CUI part comes with an integrated transformer, so I can sleep well knowing it has proper high&#x2F;low side isolation.</p><h4 id="Transformer-Isolation"><a href="#Transformer-Isolation" class="headerlink" title="Transformer Isolation"></a>Transformer Isolation</h4><p><img src="https://cdn-images-1.medium.com/max/800/0*SlDlMt4wHoQyObXr.png"><figcaption>Half decent looking transformer</figcaption></p><p>The device above is an example of a transformer with decent looking isolation. The yellow tape isolates the primary windings from the secondary windings. Poorly manufactured transformers will often omit this tape and have only the bronze-coloured lacquer wire coating as isolation. If the device overheats, this can cause a primary to secondary short, which would connect AC mains to the 5V USB port; at best, this would destroy a phone; at worst, it could be lethal.</p><h4 id="PCB-Isolation"><a href="#PCB-Isolation" class="headerlink" title="PCB Isolation"></a>PCB Isolation</h4><p>The transformer isn’t the only item requiring decent isolation; the PCB should also be designed to allow acceptable creepage and clearance.</p><ol><li>Clearance is the shortest distance in air between two conductive parts.</li><li>Creepage distance is the shortest distance along the surface of solid insulating material between two conductive parts.</li></ol><p>You can google around and find a table of these recommended distances; I used IPC2221A. There are lots of different tables, most of which are similar.<br><img src="https://cdn-images-1.medium.com/max/666/0*ugUpcCH7n1HEg7ib.png"><figcaption>IPC2221A</figcaption></p><p>I just took 2.5mm and added another 1.5mm to be safe. 4 mm of isolation is very fair.<br><img src="https://cdn-images-1.medium.com/max/1024/1*fOu_Ny8UZW0jSxwChc-9MQ.png"><figcaption>High side to low side isolation</figcaption></p><h4 id="Line-Bypass-Capacitor"><a href="#Line-Bypass-Capacitor" class="headerlink" title="Line Bypass Capacitor"></a>Line Bypass Capacitor</h4><p>As for other safety components, let’s talk about some key players.<br><img src="https://cdn-images-1.medium.com/max/743/1*L_UX_CKZ20oDs9sDwD_6fw.png"><figcaption>CY3</figcaption></p><p>CY3 connects from the high to the low side. It exists to reduce electromagnetic interference. If it shorts out, it will connect AC mains to the 5V USB port. This is why we use class “Y1” rated capacitors, which will “fail open”.</p><h4 id="Fusing"><a href="#Fusing" class="headerlink" title="Fusing"></a>Fusing</h4><p><img src="https://cdn-images-1.medium.com/max/245/1*yGo_2FghuDP2pN4dBRb73A.png"><figcaption>Fuse F1</figcaption></p><p>The fuse on the input ensures that if anything downstream fails, you’re not relying on the wall breaker (15A in North America) to trip out. It’s possible the device might short against a load that won’t cause to breaker to trip but will cause several amps of current to flow, which will start a fire.</p><p><strong>NTC</strong><br><img src="https://cdn-images-1.medium.com/max/157/1*w8YQ_W0fVSBcwZWhTFMiUA.png"><figcaption>NTC1</figcaption></p><p>The negative temperature coefficient (NTC) device on the input limits inrush currents; when the device is powered up, NTC1 will have around 10ohms of resistance, raising the entire device’s input impedance, therefore limiting the device inrush current. After some time, the NTC1 will heat up, and the resistance will go down, reaching some equilibrium.</p><p><strong>TVS Diode</strong><br><img src="https://cdn-images-1.medium.com/max/117/1*8A_4ZcAXv1ZkEOGmBg1hAg.png"><figcaption>D1</figcaption></p><p>TVS diodes operate as transient overvoltage protection devices and are useful in highly inductive applications or devices that may experience static buildup during a plugin event. The diode has a reverse breakdown at a certain voltage, much like a zener, where it will start conducting.</p><h3 id="In-Conclusion"><a href="#In-Conclusion" class="headerlink" title="In Conclusion"></a>In Conclusion</h3><p>This certainly wasn’t my ideal post, but things are rocky right now. I plan to build some costly prototypes in the coming months, test and wait until things shake out on the chip shortage front.</p><p>I’m still very keen to run a crowdfunding campaign! However, I’ll have to press pause on that for now. Please keep in touch by joining our <a href="https://discord.gg/EtZT7mjNuM">Discord community</a>!</p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2021/09/22/I&#39;m-not-putting-a-WiFi-router-into-a-phone-charger-Part-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>I&#39;m putting a WiFi router into a wall charger (Part 2)</title>
      <link>https://interruptlabs.ca/2021/07/19/I&#39;m-putting-a-WiFi-router-into-a-wall-charger-Part-2/</link>
      <guid>https://interruptlabs.ca/2021/07/19/I&#39;m-putting-a-WiFi-router-into-a-wall-charger-Part-2/</guid>
      <pubDate>Mon, 19 Jul 2021 11:37:10 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;This post will outline the bringup of Linux on a PCB I developed from scratch. You can read more about the hardware design in the</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>This post will outline the bringup of Linux on a PCB I developed from scratch. You can read more about the hardware design in the earlier posts linked above. I’ll talk about driver bringup, system characterization, testing, and software development. By the end of this post, we will have a fully booted single-board computer (SBC). The last post was left on a somewhat unexciting note. To recap, I populated the 2.5V regulator with a 3.3V. After powering up the board, I read this rail had an <strong>absolute maximum rating of 2.7V</strong>. Or so we were told…</p><p>After replacing the regulator with a 2.5V variant, I fired everything up, and the current consumption looked reasonable. I cloned the Buildroot repository to have a poke around. Buildroot is an open source project designed to make building the bootloader, kernel, operating system and required apps easier. The A33-OLinuXino has similar hardware to my board, so I used that as a jumping-off point. There’s one command to configure the build: make olimex_a33_olinuxino_defconfigthis takes the config fromconfig&#x2F;olimex_a33_olinuxino_defconfig and replaces the .config file in the buildroot home directory. The .config file is responsible for defining the top-level buildroot configuration. Issuing make menuconfig will bring up the config menu.<br><img src="https://cdn-images-1.medium.com/max/349/1*u1RkHP6N3X4UxWcYXX7PfQ.png"><figcaption>make menuconfig</figcaption></p><p>Pictured above is the main Buildroot config that allows you to select things like processor architecture, bootloader, kernel version and packages you want to ship with your image. I built using the vanilla OLinuX config file and flashed output&#x2F;images&#x2F;sdcard.img to an SD card, connected my USB to serial converter to the UART pins of the board, inserted the SD card to the board and fired it up…</p><pre>U-Boot SPL 2019.04 (Jun 23 2021 - 15:19:43 -0700)DRAM: 1024 MiBFailed to set core voltage! Can't set CPU frequencyTrying to boot from MMC1MMC: no card presentspl: mmc init failed with error: -123SPL: failed to boot from all boot devices### ERROR ### Please RESET the board ###</pre><p>This is the bootloader complaining about something. After a visual inspection of the board, I noticed that I missed populating R25, a resistor in series with the SD detect pin. The SD detect pin is a contact that closes when an SD card is inserted. The contact status can alert the user about a missing SD card, like above with the “MMC: no card present” message.<br><img src="https://cdn-images-1.medium.com/max/1024/1*PgB5uRj7os1saVhiNb3uhQ.jpeg"></p><p>After popping the part, we got a little farther in the boot process.</p><pre>U-Boot SPL 2019.04 (Jun 23 2021 - 15:19:43 -0700)DRAM: 1024 MiBFailed to set core voltage! Can't set CPU frequencyTrying to boot from MMC1 U-Boot 2019.04 (Jun 23 2021 - 15:19:43 -0700) Allwinner TechnologyCPU:   Allwinner A33 (SUN8I 1667)Model: Olimex A33-OLinuXinoDRAM:  1 GiBinitcall sequence 7efcf0f4 failed at call 4a002459 (err=-5)### ERROR ### Please RESET the board ###</pre><p>This error comes from a function in u-boot&#x2F;include&#x2F;initcall.h which is responsible for calling a bunch of functions; those function’s pointers are held in two separate arrays called init_sequence. There are two arrays because there are two bootloaders. The primary bootloader sits in the RAM of the A33 itself, which is about 32k. The job of the primary bootloader is to get the secondary bootloader into external ram and run it. We don’t put the entire bootloader into the internal 32k because it won’t fit.</p><p>Back to the error itself, 4a002459 is the address of the function that is returning -5 as the error code. To get the symbol from the address, we can grep for it in the address map file. I found it was erroring out on a board_init function, specifically on an i2c function. I had no idea why the bootloader was doing anything with i2c until I remembered the difference between my board and the OLinuXino board: PMICs. The power management IC used on the OLinuXino board was an i2c controlled device with adjustable outputs, while I’m using normal switching regulators. I then went into the uboot menuconfig by issuing make uboot-menuconfigand disabled everything relating to AXP22*, which is the name of the PMIC. I then got to boot and ended up <a href="https://pastebin.com/raw/0q3t3Nvh">here</a>. After enabling some more verbosity, I found <a href="https://elixir.bootlin.com/linux/latest/source/drivers/mmc/core/core.c#L1105">this function</a> was erroring out and printing: “no support for card’s volts”. Without knowing much, I guessed this was more to do with the PMIC, so I <a href="https://github.com/o7-machinehum/buildroot/commit/e1fca5e1d1cae2bde6dbfdafd5febc88e856307e#diff-e34bd72c0e432a8d5a010c38e84d7e35cf6fe6a43dde2a05d3ab3becc6866710">ripped out everything to do with it from the device tree file.</a> Before I knew it…</p><h3 id="The-System-Boots"><a href="#The-System-Boots" class="headerlink" title="The System Boots!"></a>The System Boots!</h3><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FAcYHbsRL20E%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DAcYHbsRL20E&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FAcYHbsRL20E%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no">[https://medium.com/media/f11bda2a1350b84426ebc20608dd5a9f/href](https://medium.com/media/f11bda2a1350b84426ebc20608dd5a9f/href)</iframe><p>I loaded up the build will all the standard stuff: python, wpa_supplicant, apache web server, the RTL8188eu driver, dhcpcd, dhcpd, vim, and whatever else my little heart could think of. My next goal was to get the two wifi chips up and running. As I couldn’t actually get my hands on the dongles, I had to improvise…<br><img src="https://cdn-images-1.medium.com/max/707/0*u0OyLTa0oZJlOWKm"><figcaption>Deadbugging modules to the end of stripped USB connectors</figcaption></p><p>This is actually a preferable alternative to dongles, as those modules run off 3.3V rather than 5V, which is the same configuration as the final design. This means that I can ensure the 3.3V regulators don’t crap out when these guys are going full boar. I then probed in the driver with the modprobe command and found the two wifi devices <em>wlan0</em> and <em>wlan1</em> come up right away.</p><pre># ls /lib/modules/5.0.0/extra/8188eu.ko# modprobe 8188eu.ko[   86.120509] 8188eu: loading out-of-tree module taints kernel.[   86.201962] RTW: rtl8188eu v5.2.2.4_25483.20171222[   86.239880] RTW: hal_com_config_channel_plan chplan:0x08[   86.246164] RTW: rtw_regsty_chk_target_tx_power_valid[   86.278995] RTW: hal_com_config_channel_plan[   86.295988] usbcore: registered new interface driver rtl8188eu# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever2: **wlan0:** &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc    link/ether 28:f3:66:44:b1:b1 brd ff:ff:ff:ff:ff:ff3: **wlan1:** &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc    link/ether 28:f3:66:44:a9:f9 brd ff:ff:ff:ff:ff:ff</pre><p>Connecting to my home wifi was easy…</p><pre>iwlist wlan0 scan | grep ESSID # Scan for SSID'swpa_passphrase &lt;My SSID&gt; &lt;MY PW&gt; | tee /etc/wpa_supplicant.confwpa_supplicant -c /etc/wpa_supplicant.conf -i wlan0</pre><h3 id="Secure-Shell"><a href="#Secure-Shell" class="headerlink" title="Secure Shell"></a>Secure Shell</h3><p>It’s time to ditch the USB to serial converter and go for something a little fancier: ssh. Secure Shell is a way to remote into a Unix machine over the internet and has several advantages, such as multiple sessions and file transfer. To do this, I added openSSH into the build using Buildroot and booted it up; openSSH has a config file here &#x2F;etc&#x2F;ssh&#x2F;sshd_config inside this config file contained the lines… # PermitRootLogin yes since we want to permit a root login, we uncommented this line. We would then like to take this <code>sshd_config</code> file and have Buildroot insert it into the output images, so we don’t have to edit it every time we flash a new SD card. This is done using a “rootfs overlay”, which is just a file that buildroot will copy into the rootfs of the image. I was then able to get root access over ssh from the host machine!</p><h3 id="System-Characterization"><a href="#System-Characterization" class="headerlink" title="System Characterization"></a>System Characterization</h3><p>One of the primary reasons for building the larger board was to do power characterization. I want to know if I need a 5, 10, or 15W flyback supply that converts from 90V-300V down to 5V. To determine this, you would normally look at the datasheets, make a power budget and figure it out like a civilized person. But I’m not getting paid, and I don’t want to be civilized, so let’s turn everything up to 11 and see what the current draw is. The max current consumption for this device is as follows.</p><ul><li>All 4 cores going full burn</li><li>RAM being used</li><li>Both wifi chips transmitting</li><li>SD card read&#x2F;write</li></ul><p>We can crank the CPU up to full with an application called cpu, memory access can be cranked with memtester, and stress the wifi radios can move a big file over SCP. So all that’s left is to <a href="https://github.com/o7-machinehum/buildroot/blob/wifiwart/board/interruptlabs/wifiwart/rootfs_overlay/usr/bin/crank_to_11.sh">write a little script.</a> After twiddling with this for a while, I couldn’t get the supply current to exceed half an amp @ 5V. To be safe, we can double this and spring for a 5W converter. This is considerably better than the 15W part I picked out earlier!</p><h3 id="Memory-Testing"><a href="#Memory-Testing" class="headerlink" title="Memory Testing"></a>Memory Testing</h3><p>One major concern I had with the DDR3 RAM was the length matching requirements. To test memory fidelity, we can use an application called memtester. Below I’m testing half a gig of ram under various conditions. The output looks good, which gives me confidence in the design.</p><pre># memtester 1000000 1memtester version 4.5.0 (32-bit)Copyright (C) 2001-2020 Charles Cazabon.Licensed under the GNU General Public License version 2 (only).pagesize is 4096pagesizemask is 0xfffff000want 576MB (603979776 bytes)got  576MB (603979776 bytes), trying mlock ...locked.Loop 1/1:  Stuck Address       : ok  Random Value        : ok  Compare XOR         : ok  Compare SUB         : ok  Compare MUL         : ok  Compare DIV         : ok  Compare OR          : ok  Compare AND         : ok  Sequential Increment: ok  Solid Bits          : ok  Block Sequential    : ok  Checkerboard        : ok  Bit Spread          : ok  Bit Flip            : ok  Walking Ones        : ok  Walking Zeroes      : ok  8-bit Writes        : ok  16-bit Writes       : ok  Done.</pre><h3 id="Apache-Webserver"><a href="#Apache-Webserver" class="headerlink" title="Apache Webserver"></a>Apache Webserver</h3><p>The Apache webserver is one of the most influential projects in the open-source ecosystem. If you’re familiar with the “LAMP” software bundle, Apache is the “A”. It does one thing, and it does it well: host HTTP servers. If the Wifiwart ever makes it to market, I want users to do some configuration through a front-end webpage. So to test it out, I installed the webserver, booted the device and navigated to its IP in chrome, and it just worked…<br><img src="https://cdn-images-1.medium.com/max/998/1*a9W6mnIKAbQcGA5YWsbmog.png"><figcaption>Hack the Planet</figcaption></p><h3 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h3><p>Up to this point, I’ve outlined a non-form-factor conception, design, assembly, bringup and characterization. Right now, I feel confident in the hardware and software, and I can begin the “form factor design”. Since the final design is the same electronics, I can be laser-focused on the mechanical aspects.</p><p>My goals are to have a fully functional and assembled unit with a 3D printed enclosure in the next post! To keep up to date with everything going on, I recommend joining the Discord server linked above!</p><p>Until next time! :)<br><img src="https://cdn-images-1.medium.com/max/729/1*u3yE6cNDZBADh--L5eUThQ.png"><figcaption>Updated CAD :)</figcaption></p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2021/07/19/I&#39;m-putting-a-WiFi-router-into-a-wall-charger-Part-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>I&#39;m putting a WiFi router into a wall charger (Part 1)</title>
      <link>https://interruptlabs.ca/2021/06/15/I&#39;m-putting-a-WiFi-router-into-a-wall-charger-Part-1/</link>
      <guid>https://interruptlabs.ca/2021/06/15/I&#39;m-putting-a-WiFi-router-into-a-wall-charger-Part-1/</guid>
      <pubDate>Tue, 15 Jun 2021 13:35:53 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;This project is effectively “building a computer from scratch”; RAM, disk, USB and a processor. Our computer will be running a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>This project is effectively “building a computer from scratch”; RAM, disk, USB and a processor. Our computer will be running a full-fledged operating system capable of installing programs, managing a network stack, playing games and even browsing the internet. However, we’re not going to be playing any games. This post is going to outline board layout, BOM generation, assembly and PCB bring up.</p><h3 id="Board-Layout"><a href="#Board-Layout" class="headerlink" title="Board Layout"></a>Board Layout</h3><p>The schematic is the logical connection of the components, while the layout is the physical connection. So the first task is to set up the design rules in KiCad. I’m planning on using JLCPCB’s four-layer service; their capabilities <a href="https://jlcpcb.com/capabilities/Capabilities">can be found here</a>. Rather than putting the exact capabilities in, I typically round the numbers up; you don’t want to be designing on edge.</p><h4 id="DDR3-RAM"><a href="#DDR3-RAM" class="headerlink" title="DDR3 RAM"></a>DDR3 RAM</h4><p>I chose the <a href="https://www.digikey.ca/en/products/detail/alliance-memory-inc/AS4C512M16D3L-12BIN/5298018">AS4C512M16D3L-12BIN</a>, a 1GB DDR3L SDRAM IC housed in a 96 pin BGA package.<br><img src="https://cdn-images-1.medium.com/max/640/0*kjkmavikKR8vp0FA.JPG"><figcaption>96 Pin Ball Grid Array (BGA) package</figcaption></p><p>There are many things to consider when routing DDR3, firstly, the part placement. You may be tempted to place it as close to the processor as possible, and even if this is ideal for signal integrity (SI), it may make routing impossible. The A33-OLinuXino gerbers outline nice placement.<br><img src="https://cdn-images-1.medium.com/max/1024/1*lIS46PRoiqipOcKrlYPOcQ.png"><figcaption>A33-OLinuXion Top layer</figcaption></p><p>Olimex also went for a four-layer board, and the top and bottom layers were almost purely signalling. The designer used the two inner layers for GND and power distribution. They used two RAM ICs as the A33 supports two ranks. The upper and lower data bytes were routed to the upper and lower RAM chips, respectively. This makes routing nice, as byte groups don’t have to be length matched to each other, just length matched within their group.</p><p>I placed my RAM to the top right of the A33, and this would allow me to drop in some vias and pull down the signals pretty easily if I ever needed another RAM IC. Below are the length matching requirements I used.</p><pre>CK/!CK: 0.2mmaddr[0:15], !WE, !CS, !RST, DBA[0:2], ODT, !CKE, CAS, RAS: 3mmDQ[0:7]: 1.27mmDQ[8:15]: 1.27mm</pre><p>To further elaborate on these numbers, CK&#x2F;!CK should be within 0.2mm of each other, DQ[0:7] should be within 1.27mm of each other, etc. These numbers came from a <a href="https://github.com/o7-machinehum/wifiwart/blob/master/electronics/app_notes/ddr3-uniphy-layout-guideline.pdf">document</a> and experience doing this type of work.</p><p>Kicad is getting good; it ships with a nice length tuning tool. To start, I found the longest trace, which turned out to my 40mm; I then set the target to 40mm. After that, you click other traces to match, and it will automatically add the little squiggles to lengthen the trace. My one gripe is KiCad doesn’t add the via length to the total track length. To account for this, I just ensured matched traces have the same numbers of vias.<br><img src="https://cdn-images-1.medium.com/max/1010/1*hCa5A4FfH7fUM8_AAdiUVw.png"></p><h3 id="Power-Supplies"><a href="#Power-Supplies" class="headerlink" title="Power Supplies"></a>Power Supplies</h3><p>As outlined in the last post, I chose the TPS62095RGTR to power the rails with higher current requirements. This switch-mode power supply (SMPS) operates in the buck (step down) configuration. I went with switching power supplies over linear power supplies for their efficiency improvement. It’s pretty simple to calculate the max efficiency of a linear power supply - it is denoted by the equation below.<br><img src="https://cdn-images-1.medium.com/max/107/0*4UraVCyqMMyxDCyo"><figcaption>Max efficiency for an LDO</figcaption></p><p>For example, if I used an LDO for my 1.1V supply derived from 5V, we’re looking at an absolute max efficiency of 22%. Where does the remaining power go? Heat! Since I’m building a small enclosed thing, I don’t want 5 watts of heat melting the enclosure. To get higher efficiency, you need switching supplies. They’re more efficient as (loosely speaking) they convert DC to AC and then back to DC using magnetics.<br><img src="https://cdn-images-1.medium.com/max/216/1*tCGHq0lYpdGC5xIfEgZAgQ.png"><figcaption>Buck SMPS</figcaption></p><p>That switch is a transistor that is PWMing the input voltage. The LC filter then converts the PWM signal back into DC, which is consumed by the load.</p><p>So you have to be very considerate when laying out a supply like this; the first aspect to consider is the supply’s hot loop.<br><img src="https://cdn-images-1.medium.com/max/581/1*48KSeAjmkeZkAf5SZgontQ.png"><figcaption>Hot loop</figcaption></p><p>The output of the SW pin is going to be a high current 1.4Mhz switching signal. The current path flows through the inductor to Vout and Cout. This red line I have drawn above is called the power supply “hot loop.” Keep it as short as possible. This is just one of several layout considerations you should take; for a more comprehensive list, I would advise checking out AN-1149 from TI.</p><p>I’ve used an inner layer for power distribution. 5V is pulled around from its input power pin while most other power nets feed either the A33 or RAM. After staring at this screenshot for a while, I see many places for improvement, but this should do the trick. A general rule of thumb is 15mil&#x2F;amp. However, the inner layers have less thermal dissipation, so we should double it.<br><img src="https://cdn-images-1.medium.com/max/868/1*WCYAHYeR8h66lClOzLfZKA.png"><figcaption>Power Distribution Layer</figcaption></p><h3 id="Bill-of-Materials-Generation"><a href="#Bill-of-Materials-Generation" class="headerlink" title="Bill of Materials Generation"></a>Bill of Materials Generation</h3><p>In KiCad, working with components can be a pain. It would be best to end up with an automatic procedure to generate a CSV containing all the part numbers, manufacture, references and component quantity. You should then take that CSV and dump it directly into your part supplier’s BOM tool. One of KiCad’s shortcomings is its ability to group components by value (or other fields) and then apply one part number to the lot.</p><p>As an example: say I’ve placed 300x 1k, 1&#x2F;4W, 0402 resistors in the schematic. I want to edit all of these parts to have a “Part Number” field with the manufacture part number. Unfortunately, KiCad can’t perform this grouping itself, so we’re shit out of luck; I had to edit every single field of the 1k resistors.</p><p>Just kidding, that would be the outcome if I were using bullshit closed source proprietary software. Since KiCad has an incredible community, xesscorp has built a tool called <a href="https://pypi.org/project/kifield/">Kifield</a>. This does exactly what I described, however, with one small issue I patched: <a href="https://github.com/xesscorp/KiField/pull/64">https://github.com/xesscorp/KiField/pull/64</a>. With purely numeric part numbers, the script would raise an exception. This was because Python uses type inference instead of explicit type specification (like in C). The function re.sub() expects a string, and since I used a purely numeric part number Python was inferring this as an int. This took me 10 minutes to figure out and is another great example of how proprietary software would have left me out in the rain.</p><h3 id="The-Build"><a href="#The-Build" class="headerlink" title="The Build"></a>The Build</h3><p>After the design is finished, it’s time to order all the parts; I grabbed the parts from LCSC and boards from JLCPCB. I had to find someone on Alibaba to get the A33’s from, as this isn’t a standard stocked component.<br><img src="https://cdn-images-1.medium.com/max/1024/1*eLMWWfszmc_EJwABhhHRwQ.jpeg"><figcaption>Bare Bords</figcaption></p><p>I assembled the boards at Vancouver Hack Space, a communal space with everything needed for electronics assembly (and any other tools you require). To start, I taped the boards to the ground, then the solder stencil on top. Then I used a blade to disperse all the paste over the top layer of the boards.<br><img src="https://cdn-images-1.medium.com/max/1024/1*SULH8C1ZaF7LVf9wLszK4Q.jpeg"><figcaption>Pasted Boards</figcaption></p><p>I then placed all the required top components with tweezers, and then it’s into the reflow oven!<br><img src="https://cdn-images-1.medium.com/max/1024/1*Mm7hgyS704VO-NMX1_y2XQ.jpeg"><figcaption>Pre-Reflowed Bords</figcaption></p><p>These boards require components on both sides because the A33 and RAM require decoupling on their internal pins; caps on the top layer aren’t close enough.<br><img src="https://cdn-images-1.medium.com/max/1024/1*0IRvE-nSyftwix6FbAvZRA.jpeg"><figcaption>Finished Boards!</figcaption></p><h3 id="Bringup"><a href="#Bringup" class="headerlink" title="Bringup"></a>Bringup</h3><p>A keen observer would have noticed the 0ohm resistors bridging the supplies’ output to their main power distribution rail. Isolating the supplies’ output from their load was done to verify the output voltage before connecting them to the rest of the electronics. An improper voltage could easily damage the downstream electronics. All the switching supplies worked as expected when firing up the boards, meaning the output voltage looked correct. If I were working for a client, I would check all the ripple on the rails under the continuous and discontinuous mode, load the rails with a digital load to check the thermals and supply current, check the transient response to ensure the supplies can react to dynamic loading, check the efficiency and check the quiescent current consumption. However, I’m not working for a client, so that a simple DMM check will suffice. I start by checking for dead shorts from the outputs to GND and outputs to other outputs. After this seemed okay, I fired on a current limited 5V@100mA supply and checked the outputs with a DMM on DC mode (ensure correct voltage) and AC mode (ensure the voltage isn’t switching all over the place). Everything seemed kosher.</p><p>There was one major design flaw with the power tree. The 2.5V linear regulator is derived from the 3.3V switching regulator, but the input of the 2.5V LDO is connected after the 0-ohm jumper. This means to test the 2.5V LDO, and I have to connect the 3.3V regulator to the rest of the system. Stupidly assuming that everything would be fine, I jumped all the rails into the system and fired it up. The 2.5V output was measuring 3.3V! I then frantically turned off the supply and sulked into my chair. This feeling only became worse after checking the datasheet for the A33 and realizing the absolute max rating of the DLL (2.5V) input was 2.75V. Electrical engineering is all about being meticulous and overly paranoid about everything all the time, which I failed to do. After the autopsy was complete, the problem was obvious. Somehow I ordered a 3.3V LDO instead of a 2.5V, even though the BOM lists the 2.5V part. Sad days, sad days for sure.</p><p>My goal for the end of this post was to get to a point where I was booting into the OS. However, things don’t always work out. I’ll have to order some new regulators and try with the other boards.</p><h3 id="The-Great-Divide"><a href="#The-Great-Divide" class="headerlink" title="The Great Divide"></a>The Great Divide</h3><p>Up until now, I have designed a single board that will be used for evaluation, and this is called the “non-form factor” board, or NFF for short. You have probably noticed that it isn’t the correct shape to fit inside the enclosure. This brings us to the great divide: the fork of the NFF board into the power form factor and compute form factor. The power board’s purpose is to take 250-120V and convert this to 5V using a flyback supply feeding the switching regulators. The regulators then convert 5V into 3.3V, 3.0V, 2.5V, 1.35V and 1.1V (just as on the NFF). The power board feeds all these rails into the compute board, containing everything else in the design, such as the A33 MPU, RAM, SD card slot, two WiFi radios and USB port. There are several pros and cons to going with a two-board system. I’ve designed several of these before, so let’s talk about it.</p><h4 id="Pros-of-“two-board-system”"><a href="#Pros-of-“two-board-system”" class="headerlink" title="Pros of “two board system”"></a>Pros of “two board system”</h4><ul><li>You can rev each board individually. If you want to switch regulators on the power board and you have the inventory of the compute board, you don’t have to discard the compute boards.</li><li>Noise isolation, you’re physically moving all the switching regulators away from the sensitive electronics.</li><li>Different board manufacturing capabilities. I might choose 1oz copper for the compute and 2oz for the power. Compute might need 4 layers while the power only needs two layers.</li><li>Vertical space gain. There is a lot of horizontal board space taken by the BGA, RAM, SD card and radios. However, there is very little vertical space required. By stacking two boards, I’ve doubled the horizontal space.</li></ul><h4 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h4><ul><li>Cost. It’s more expensive to build two boards instead of one.</li><li>Signal Integrity. If you have high-speed signals running between boards, you have to worry about the SI of the board-to-board connector.</li><li>Assembly time. Gotta plug em together, yo.</li><li>Mechanical design and interface.</li></ul><p>As for the design of the two boards, I’ve chosen the RTL8188CUS module because of its super small size (10mm x 11mm) and simplicity of wiring. So I’ve created the part and dropped those into the compute board. The form factor stuff will be a tight design, so I want all the CAD of the parts in the design, so I drew up the RTL in FreeCAD.<br><img src="https://cdn-images-1.medium.com/max/807/1*rcRmAIp-60zEbTfSQWnLHg.png"><figcaption>RTL8188CUS Step File</figcaption><img src="https://cdn-images-1.medium.com/max/576/1*d9Sep3Xn6IcSCbT8_j-WIw.png"><figcaption>RTL8188CUS Symbol</figcaption></p><p>Here is the schematic symbol. It just works over USB and needs a simple 3.3V rail.</p><p>As for the mains to 5V flyback supply, I quite like CUI’s PBO-15C-5. This is a 15V flyback supply that contains the magnets, IC’s and support components to make the magic happen. I would consider it a “semi module” as you still need to supply larger caps and inductors external to the board. I like the vertical form factor. As for getting this through regulations, it’s going to be a lot easier than a discrete design.<br><img src="https://cdn-images-1.medium.com/max/300/0*vb0hgLS0wE-00Pp4"><figcaption>CUI’s PBO-15C-5</figcaption></p><p>One critical design note is: CY1 <strong>needs</strong> to be a Y1 safety capacitor. This is because, except for the transformer, it’s the one component that connects the mains to the low voltage (LV). So if this part fails, it will connect mains to the USB port, which is obviously extremely dangerous.<br><img src="https://cdn-images-1.medium.com/max/371/1*IIFXXudA5ms7jPQ7r8hQFw.png"><figcaption>CUI’s Recommended Design</figcaption></p><p>Another safety note is mains&#x2F;LV isolation. You want to take a look at a creepage and clearance table. Creepage is the distance between high voltage and low voltage with the board in between, while clearance is the distance through air. Please note this isn’t an extensive safety overview, primarily because I haven’t done a safety audit yet or even been focusing on it. <strong>Always take extreme care when working with mains electronics!</strong></p><h3 id="The-Mech"><a href="#The-Mech" class="headerlink" title="The Mech"></a>The Mech</h3><p>I am not a mechanical engineer. Until now, everything I’ve talked about has been in my wheelhouse. Now we’re getting into the sketchy stuff. The upshot is I have lots of mech friends, so I can bring them my crappy design to laugh at and eventually help fix.<br><img src="https://cdn-images-1.medium.com/max/1024/1*ZgQhQAMPE0s0y9r-sjKv1g.jpeg"><figcaption>Low Cost all Charger</figcaption></p><p>I took mechanical inspiration from the low-cost wall charger pictured above. I use the term “took inspiration” and not “copy” simply because copying this is synonymous with copying the dumbest kid in school. However, there are some parts I like: the over-moulded contacts and the slot where the PCB slides in are quite nice. So when the time comes to get a tool cut, it should be pretty straightforward? The two boards will stack vertically and connect with a normal 0.1&quot; header (for now). There are some alignment features on the inside that will allow the boards to slide into the enclosure.</p><p>As per usual, I’m going to leave you with a render of what I have so far.<br><img src="https://cdn-images-1.medium.com/max/916/1*bylIZ9MKU2IBwiDfEWEs6w.png"></p><p>Until next time! :)</p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2021/06/15/I&#39;m-putting-a-WiFi-router-into-a-wall-charger-Part-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>I&#39;m putting a WiFi router into a wall charger (Part 0)</title>
      <link>https://interruptlabs.ca/2021/04/28/I&#39;m-putting-a-WiFi-router-into-a-wall-charger-Part-0/</link>
      <guid>https://interruptlabs.ca/2021/04/28/I&#39;m-putting-a-WiFi-router-into-a-wall-charger-Part-0/</guid>
      <pubDate>Wed, 28 Apr 2021 16:41:33 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;This is the first part of a blog about putting a wifi router into a phone charger. Join us on &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>This is the first part of a blog about putting a wifi router into a phone charger. Join us on <a href="https://discord.gg/EtZT7mjNuM">Discord here</a>. Check out the <a href="https://github.com/o7-machinehum/wifiwart">Github</a>.</p><p>WiFi Pineapples are well-known tools in the security community. For those unfamiliar, Pineapples are purpose-built routers to be used in network attacks and exploits. With a Pineapple, you can perform man-in-the-middle attacks, network deauthing and password sniffing. Gilfoyle and Elliot used them in popular shows such as Mr. Robot and Silicon Valley. Hak5 had made a splash in the security community when they created the Pineapple, but I think there’s one major flaw: The form factor.<br><img src="https://cdn-images-1.medium.com/max/1024/1*qCt5mywjpZ9qsblO9COfAg.png"><figcaption>When IT finds your drop</figcaption></p><p>The Pineapple is a router, and, well, it looks like a router. However, there is no reasonable situation where an IT person would be cool with you plugging a router into their network. This is why I’m putting a WiFi router into a 5V wall adapter.<br><img src="https://cdn-images-1.medium.com/max/360/0*jUoQD3Udknc9b5Lx.jpg"><figcaption>This isn’t your grandma’s phone charger.</figcaption></p><p>Drop one of these in a Mcdonald’s, and nobody’s going to expect a thing. You can leave it for days, while it collects data and marshals it back to your home network.</p><p>As for the methodology, I’m using 100% open-source CAD software. KiCad will be used to design the boards and FreeCad for all the mechanical work. BuildRoot or openWRT will be compiling the OS, and I’m booting an open-source OS on my home machine. The design is 100% open-source, schematics, board layout, gerbers and mechanical. All licenced under MIT.</p><p>That covers the concept; let’s get into the design. This design requires a microprocessor (MPU) with decent mainline Linux support, USB, MMU, SDIO and a clock rate north of 1Ghz. An MPU has a memory management unit (MMU), while a microcontroller (MCU) does not. An MMU is a special piece of IP that maps virtual memory (The relative memory address application are using) to physical memory (the actual address in the RAM or disk). An MMU is mandatory for Linux, and we need Linux for its network stack.</p><p>I ended up choosing the <a href="http://dl.linux-sunxi.org/A33/A33_Datasheet_release1.0.pdf">Allwinner A33</a>; it’s an older MPU that came out in 2014. Tablet manufacturers used it in their Android devices, and since Android uses Linux, we should get good mainline support. It’s a quad-core 1.2Ghz processor with all the expected peripherals: USB, I2C, SPI, SDIO, RTC and PWM. It’s a nice little processor, and you can pick them up for &lt; 10$. For non-volatile storage, I chose to use an SD card. For RAM, I’m going with an <a href="https://www.digikey.ca/en/products/detail/alliance-memory-inc/AS4C512M16D3L-12BIN/5298018">AS4C512M16D3L-12BIN</a>, a 1GB low-power DDR3 IC. One nice thing about DDR3 is all the chips are pin&#x2F;pin, so if you want to reduce your BOM, you can use a chip with less memory.<br><img src="https://cdn-images-1.medium.com/max/880/1*MOheNg8OwJlXztrkLQ0BVg.png"><figcaption>A33 DDR3 Controller</figcaption></p><p>Pictured above is the connection from the DDR3 RAM controller on the A33 MPU to the RAM sheet; that little purple box is the sheet, not the part. I hope it’s pretty obvious what’s going on; the chip support two ranks; however, I’m using the one. Schematic capture for RAM is pretty straightforward; the routing is when it gets exciting.<br><img src="https://cdn-images-1.medium.com/max/687/1*azmSTnmml7T1RAisa1f8Cw.png"></p><p>Powering an MCU is simple: typically, 3.3V is regulated down internally. That luxury goes out the window when you start working with the big boys; this chip needs five different voltage rails.</p><ul><li>Ram is 1.35V</li><li>Cores are 1.1V</li><li>DLL needs 2.5V (delay-locked loop btw)</li><li>Analogs need 3.0V</li><li>IO needs 3.3V</li></ul><p>Oh, and there’s a sequence the rails need to come up at…<br><img src="https://cdn-images-1.medium.com/max/791/1*4yhmL3XwoOBbnbJczjez8w.png"></p><p>Every rail except the 2.5V requires a peak load of around 2A, so it’s time to pick out some switch mode power supplies! I liked the look of the <a href="https://www.digikey.ca/en/products/detail/texas-instruments/TPS62095RGTR/4864096?s=N4IgTCBcDaICoAUDKA2MAGAnAVgEoHE5cQBdAXyA">TPS62095RGTR</a>, and the datasheet says it has decent efficiency, which is important for thermals. I picked a CoilCraft XAL4020 inductor as they usually have the lowest DC resistance. This supply has a soft start pin which I can use to sequence the rails.</p><p>I will ignore the “powered from mains” requirement for this round of the board and feed in 5V elsewhere. Once the boards arrive, I need to analyze the allowable ripple into the supplies to size the capacitor on the output of the full-wave rectification bridge.<br><img src="https://cdn-images-1.medium.com/max/1024/1*UlCEsWA3yrhYbNR9BjIWpQ.png"></p><p>To wire in the radios, I’m currently placing USB-A jacks which will plug into two wifi dongles. This will work until I can settle on a part; currently, I quite like the RTL8188CUS. The nice thing about this module is you can buy the USB version of it online for cheap, so moving to the solder-down module isn’t much work.<br><img src="https://cdn-images-1.medium.com/max/1000/0*aecZO7mALwapizCg.jpg"><figcaption>RTL8188CUS Wifi Module</figcaption></p><p>The non-volatile memory (NVM) for the device is an SD card; this connects over an SDIO interface and isn’t very interesting. Here’s a picture for completeness.<br><img src="https://cdn-images-1.medium.com/max/807/1*NqowVLbQVRtGe_EX4Wecmg.png"><figcaption>Wired into the A33</figcaption></p><p>Once all of this is connected up, we _should _have a fully booting computer, assuming we have the correct image flashed to the SD card.</p><p>The next installment of this blog will feature more of the board layout; I want to talk about routing DDR3, power supplies and BGA packages! Until then, I’ll leave you with a render of the unfinished board!<br><img src="https://cdn-images-1.medium.com/max/1024/1*H4jzZ_CwTjGwbOibf98FfA.png"><figcaption>Current Unfinished PCB</figcaption></p>]]></content:encoded>
      
      
      
      
      <comments>https://interruptlabs.ca/2021/04/28/I&#39;m-putting-a-WiFi-router-into-a-wall-charger-Part-0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
